{"version":3,"sources":["webpack:///2.js","webpack:///./www/src/js/input-file.js","webpack:///./~/backbone/backbone.js?b8b2*","webpack:///(webpack)/buildin/global.js?3698*","webpack:///./www/src/js/input-file/error-messages-template.html","webpack:///./www/src/js/input-file/progress-template.html","webpack:///./www/src/js/input-file/upload-template.html","webpack:///./www/src/js/input-file/value-template.html","webpack:///./www/src/js/input-file/upload-view.js"],"names":["webpackJsonp","130","module","__webpack_exports__","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__input_file_upload_view__","InputFile","selector","arguments","length","undefined","this","$","each","index","button","input","view","data","val","url","setValueInput","setFileThumbnail","setFileUrl","renderFileValue","document","on","e","preventDefault","setFileInputName","setActionUrl","body","appendChild","render","el","137","exports","global","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","factory","root","self","_","Backbone","apply","previousBackbone","slice","Array","prototype","VERSION","noConflict","emulateHTTP","emulateJSON","addMethod","method","attribute","iteratee","context","cb","defaultVal","args","call","unshift","addUnderscoreMethods","Class","methods","isFunction","isObject","_isModel","modelMatcher","isString","model","get","attrs","matcher","matches","attributes","Events","eventSplitter","eventsApi","events","name","callback","opts","names","i","keys","test","split","internalOn","obj","listening","_events","onApi","ctx","_listeners","id","listenTo","_listenId","uniqueId","listeningTo","_listeningTo","thisId","objId","count","options","handlers","push","off","offApi","listeners","stopListening","ids","remaining","j","handler","_callback","once","onceMap","bind","listenToOnce","map","offer","trigger","Math","max","triggerApi","objEvents","allEvents","all","triggerEvents","concat","ev","l","a1","a2","a3","unbind","extend","Model","cid","cidPrefix","collection","parse","defaults","result","set","changed","initialize","validationError","idAttribute","toJSON","clone","sync","attr","escape","has","key","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","isEqual","_pending","clear","hasChanged","isEmpty","changedAttributes","diff","old","size","previous","previousAttributes","fetch","success","resp","serverAttrs","wrapError","save","validate","wait","isNew","patch","xhr","destroy","defer","base","urlError","replace","encodeURIComponent","constructor","isValid","error","values","pairs","invert","pick","omit","chain","Collection","models","comparator","_reset","reset","setOptions","add","remove","merge","addOptions","splice","array","insert","at","min","tail","singular","isArray","removed","_removeModels","added","merged","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","existing","_prepareModel","_addReference","orderChanged","some","m","_removeReference","previousModels","pop","shift","_byId","modelId","where","first","findWhere","Error","sortBy","pluck","create","callbackOpts","indexOf","_onModelEvent","event","prevId","forEach","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","any","include","includes","contains","invoke","toArray","head","take","initial","rest","drop","last","without","difference","shuffle","lastIndexOf","sample","partition","groupBy","countBy","indexBy","findIndex","findLastIndex","View","viewOptions","_ensureElement","delegateEventSplitter","tagName","$el","_removeElement","setElement","element","undelegateEvents","_setElement","delegateEvents","match","delegate","eventName","listener","undelegate","_createElement","createElement","className","_setAttributes","type","methodMap","params","dataType","contentType","JSON","stringify","_method","beforeSend","setRequestHeader","processData","textStatus","errorThrown","ajax","update","delete","read","Router","routes","_bindRoutes","optionalParam","namedParam","splatParam","escapeRegExp","route","isRegExp","_routeToRegExp","router","history","fragment","_extractParameters","execute","navigate","optional","RegExp","exec","param","decodeURIComponent","History","checkUrl","window","location","routeStripper","rootStripper","pathStripper","started","interval","atRoot","pathname","getSearch","matchRoot","decodeFragment","decodeURI","href","getHash","getPath","path","charAt","getFragment","_usePushState","_wantsHashChange","start","hashChange","_hasHashChange","documentMode","_useHashChange","_wantsPushState","pushState","_hasPushState","rootPath","iframe","src","style","display","tabIndex","iWindow","insertBefore","firstChild","contentWindow","open","close","hash","addEventListener","attachEvent","_checkUrlInterval","setInterval","loadUrl","stop","removeEventListener","detachEvent","removeChild","clearInterval","title","assign","_updateHash","protoProps","staticProps","child","parent","__super__","141","g","Function","eval","151","152","153","154","169","__WEBPACK_IMPORTED_MODULE_0__upload_template_html__","__WEBPACK_IMPORTED_MODULE_0__upload_template_html___default","n","__WEBPACK_IMPORTED_MODULE_1__value_template_html__","__WEBPACK_IMPORTED_MODULE_1__value_template_html___default","__WEBPACK_IMPORTED_MODULE_2__progress_template_html__","__WEBPACK_IMPORTED_MODULE_2__progress_template_html___default","__WEBPACK_IMPORTED_MODULE_3__error_messages_template_html__","__WEBPACK_IMPORTED_MODULE_3__error_messages_template_html___default","__WEBPACK_IMPORTED_MODULE_4_underscore__","__WEBPACK_IMPORTED_MODULE_4_underscore___default","__WEBPACK_IMPORTED_MODULE_5_backbone__","__WEBPACK_IMPORTED_MODULE_5_backbone___default","uploadTemplate","a","template","valueTemplate","progressTemplate","errorMessagesTemplate","UploadView","change input","$valueInput","$wrapper","fileInputName","fileThumbnail","fileUrl","actionUrl","html","click","thumbnail","clearStatusUi","append","renderErrorMessages","messages","renderProgressBar","handleFileSelected","files","target","FormData","file","cache","response"],"mappings":"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","file":"2.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 130:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__input_file_upload_view__ = __webpack_require__(169);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\nvar InputFile = function InputFile() {\n    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.btn-input-file';\n\n    _classCallCheck(this, InputFile);\n\n    if (!selector.length) {\n        selector = '.btn-input-file';\n    }\n\n    // Render initial input state\n    $(selector).each(function (index, button) {\n        var input,\n            view = new __WEBPACK_IMPORTED_MODULE_0__input_file_upload_view__[\"a\" /* default */]();\n\n        button = $(button);\n        input = $(button.data('value-input'));\n\n        if (input.val()) {\n            var url = input.val();\n            if (button.data('file-url')) {\n                url = button.data('file-url');\n            }\n\n            view.setValueInput(input).setFileThumbnail(button.data('file-thumbnail')).setFileUrl(button.data('file-url')).renderFileValue(url, button.data('file-thumbnail'));\n        }\n    });\n\n    // Handle attempt to upload a file\n    $(document).on('click', selector, function (e) {\n        var view = new __WEBPACK_IMPORTED_MODULE_0__input_file_upload_view__[\"a\" /* default */](),\n            button = $(this);\n\n        e.preventDefault();\n\n        view.setValueInput($(button.data('value-input'))).setFileInputName(button.data('file-input-name')).setActionUrl(button.data('action-url'));\n\n        document.body.appendChild(view.render().el);\n    });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (InputFile);\n\n/***/ }),\n\n/***/ 137:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Backbone.js 1.3.3\n\n//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(factory) {\n\n  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\n  // We use `self` instead of `window` for `WebWorker` support.\n  var root = (typeof self == 'object' && self.self === self && self) ||\n            (typeof global == 'object' && global.global === global && global);\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(117), __webpack_require__(142), exports], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore'), $;\n    try { $ = require('jquery'); } catch (e) {}\n    factory(root, exports, _, $);\n\n  // Finally, as a browser global.\n  } else {\n    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n})(function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create a local reference to a common array method we'll want to use later.\n  var slice = Array.prototype.slice;\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.3.3';\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... this will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Proxy Backbone class methods to Underscore functions, wrapping the model's\n  // `attributes` object or collection's `models` array behind the scenes.\n  //\n  // collection.filter(function(model) { return model.get('age') > 10 });\n  // collection.each(this.addView);\n  //\n  // `Function#apply` can be slow so we use the method's arg count, if we know it.\n  var addMethod = function(length, method, attribute) {\n    switch (length) {\n      case 1: return function() {\n        return _[method](this[attribute]);\n      };\n      case 2: return function(value) {\n        return _[method](this[attribute], value);\n      };\n      case 3: return function(iteratee, context) {\n        return _[method](this[attribute], cb(iteratee, this), context);\n      };\n      case 4: return function(iteratee, defaultVal, context) {\n        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);\n      };\n      default: return function() {\n        var args = slice.call(arguments);\n        args.unshift(this[attribute]);\n        return _[method].apply(_, args);\n      };\n    }\n  };\n  var addUnderscoreMethods = function(Class, methods, attribute) {\n    _.each(methods, function(length, method) {\n      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);\n    });\n  };\n\n  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\n  var cb = function(iteratee, instance) {\n    if (_.isFunction(iteratee)) return iteratee;\n    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\n    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };\n    return iteratee;\n  };\n  var modelMatcher = function(attrs) {\n    var matcher = _.matches(attrs);\n    return function(model) {\n      return matcher(model.attributes);\n    };\n  };\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // a custom event channel. You may bind a callback to an event with `on` or\n  // remove with `off`; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {};\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Iterates over the standard `event, callback` (as well as the fancy multiple\n  // space-separated events `\"change blur\", callback` and jQuery-style event\n  // maps `{event: callback}`).\n  var eventsApi = function(iteratee, events, name, callback, opts) {\n    var i = 0, names;\n    if (name && typeof name === 'object') {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n      for (names = _.keys(name); i < names.length ; i++) {\n        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n      }\n    } else if (name && eventSplitter.test(name)) {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++) {\n        events = iteratee(events, names[i], callback, opts);\n      }\n    } else {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n    }\n    return events;\n  };\n\n  // Bind an event to a `callback` function. Passing `\"all\"` will bind\n  // the callback to all events fired.\n  Events.on = function(name, callback, context) {\n    return internalOn(this, name, callback, context);\n  };\n\n  // Guard the `listening` argument from the public API.\n  var internalOn = function(obj, name, callback, context, listening) {\n    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {\n      context: context,\n      ctx: obj,\n      listening: listening\n    });\n\n    if (listening) {\n      var listeners = obj._listeners || (obj._listeners = {});\n      listeners[listening.id] = listening;\n    }\n\n    return obj;\n  };\n\n  // Inversion-of-control versions of `on`. Tell *this* object to listen to\n  // an event in another object... keeping track of what it's listening to\n  // for easier unbinding later.\n  Events.listenTo = function(obj, name, callback) {\n    if (!obj) return this;\n    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n    var listeningTo = this._listeningTo || (this._listeningTo = {});\n    var listening = listeningTo[id];\n\n    // This object is not listening to any other events on `obj` yet.\n    // Setup the necessary references to track the listening callbacks.\n    if (!listening) {\n      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));\n      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};\n    }\n\n    // Bind callbacks on obj, and keep track of them on listening.\n    internalOn(obj, name, callback, this, listening);\n    return this;\n  };\n\n  // The reducing API that adds a callback to the `events` object.\n  var onApi = function(events, name, callback, options) {\n    if (callback) {\n      var handlers = events[name] || (events[name] = []);\n      var context = options.context, ctx = options.ctx, listening = options.listening;\n      if (listening) listening.count++;\n\n      handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});\n    }\n    return events;\n  };\n\n  // Remove one or many callbacks. If `context` is null, removes all\n  // callbacks with that function. If `callback` is null, removes all\n  // callbacks for the event. If `name` is null, removes all bound\n  // callbacks for all events.\n  Events.off = function(name, callback, context) {\n    if (!this._events) return this;\n    this._events = eventsApi(offApi, this._events, name, callback, {\n      context: context,\n      listeners: this._listeners\n    });\n    return this;\n  };\n\n  // Tell this object to stop listening to either specific events ... or\n  // to every object it's currently listening to.\n  Events.stopListening = function(obj, name, callback) {\n    var listeningTo = this._listeningTo;\n    if (!listeningTo) return this;\n\n    var ids = obj ? [obj._listenId] : _.keys(listeningTo);\n\n    for (var i = 0; i < ids.length; i++) {\n      var listening = listeningTo[ids[i]];\n\n      // If listening doesn't exist, this object is not currently\n      // listening to obj. Break out early.\n      if (!listening) break;\n\n      listening.obj.off(name, callback, this);\n    }\n\n    return this;\n  };\n\n  // The reducing API that removes a callback from the `events` object.\n  var offApi = function(events, name, callback, options) {\n    if (!events) return;\n\n    var i = 0, listening;\n    var context = options.context, listeners = options.listeners;\n\n    // Delete all events listeners and \"drop\" events.\n    if (!name && !callback && !context) {\n      var ids = _.keys(listeners);\n      for (; i < ids.length; i++) {\n        listening = listeners[ids[i]];\n        delete listeners[listening.id];\n        delete listening.listeningTo[listening.objId];\n      }\n      return;\n    }\n\n    var names = name ? [name] : _.keys(events);\n    for (; i < names.length; i++) {\n      name = names[i];\n      var handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) break;\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      var remaining = [];\n      for (var j = 0; j < handlers.length; j++) {\n        var handler = handlers[j];\n        if (\n          callback && callback !== handler.callback &&\n            callback !== handler.callback._callback ||\n              context && context !== handler.context\n        ) {\n          remaining.push(handler);\n        } else {\n          listening = handler.listening;\n          if (listening && --listening.count === 0) {\n            delete listeners[listening.id];\n            delete listening.listeningTo[listening.objId];\n          }\n        }\n      }\n\n      // Update tail event if the list has any events.  Otherwise, clean up.\n      if (remaining.length) {\n        events[name] = remaining;\n      } else {\n        delete events[name];\n      }\n    }\n    return events;\n  };\n\n  // Bind an event to only be triggered a single time. After the first time\n  // the callback is invoked, its listener will be removed. If multiple events\n  // are passed in using the space-separated syntax, the handler will fire\n  // once for each event, not once for a combination of all events.\n  Events.once = function(name, callback, context) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\n    if (typeof name === 'string' && context == null) callback = void 0;\n    return this.on(events, callback, context);\n  };\n\n  // Inversion-of-control versions of `once`.\n  Events.listenToOnce = function(obj, name, callback) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\n    return this.listenTo(obj, events);\n  };\n\n  // Reduces the event callbacks into a map of `{event: onceWrapper}`.\n  // `offer` unbinds the `onceWrapper` after it has been called.\n  var onceMap = function(map, name, callback, offer) {\n    if (callback) {\n      var once = map[name] = _.once(function() {\n        offer(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n    }\n    return map;\n  };\n\n  // Trigger one or many events, firing all bound callbacks. Callbacks are\n  // passed the same arguments as `trigger` is, apart from the event name\n  // (unless you're listening on `\"all\"`, which will cause your callback to\n  // receive the true name of the event as the first argument).\n  Events.trigger = function(name) {\n    if (!this._events) return this;\n\n    var length = Math.max(0, arguments.length - 1);\n    var args = Array(length);\n    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\n\n    eventsApi(triggerApi, this._events, name, void 0, args);\n    return this;\n  };\n\n  // Handles triggering the appropriate event callbacks.\n  var triggerApi = function(objEvents, name, callback, args) {\n    if (objEvents) {\n      var events = objEvents[name];\n      var allEvents = objEvents.all;\n      if (events && allEvents) allEvents = allEvents.slice();\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, [name].concat(args));\n    }\n    return objEvents;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n    }\n  };\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    var defaults = _.result(this, 'defaults');\n    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // The prefix is used to create the client id which is used to identify models locally.\n    // You may want to override this if you're experiencing name clashes with model ids.\n    cidPrefix: 'c',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Special-cased proxy to underscore's `_.matches` method.\n    matches: function(attrs) {\n      return !!_.iteratee(attrs, this)(this.attributes);\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      var unset      = options.unset;\n      var silent     = options.silent;\n      var changes    = [];\n      var changing   = this._changing;\n      this._changing = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n\n      var current = this.attributes;\n      var changed = this.changed;\n      var prev    = this._previousAttributes;\n\n      // For each `set` attribute, update or delete the current value.\n      for (var attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          changed[attr] = val;\n        } else {\n          delete changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Update the `id`.\n      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = options;\n        for (var i = 0; i < changes.length; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      var changed = {};\n      for (var attr in diff) {\n        var val = diff[attr];\n        if (_.isEqual(old[attr], val)) continue;\n        changed[attr] = val;\n      }\n      return _.size(changed) ? changed : false;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server, merging the response with the model's\n    // local attributes. Any changed attributes will trigger a \"change\" event.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (!model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true, parse: true}, options);\n      var wait = options.wait;\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !wait) {\n        if (!this.set(attrs, options)) return false;\n      } else if (!this._validate(attrs, options)) {\n        return false;\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      var model = this;\n      var success = options.success;\n      var attributes = this.attributes;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n        if (serverAttrs && !model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\n      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\n      var xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n      var wait = options.wait;\n\n      var destroy = function() {\n        model.stopListening();\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (wait) destroy();\n        if (success) success.call(options.context, model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      var xhr = false;\n      if (this.isNew()) {\n        _.defer(options.success);\n      } else {\n        wrapError(this, options);\n        xhr = this.sync('delete', this, options);\n      }\n      if (!wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base =\n        _.result(this, 'urlRoot') ||\n        _.result(this.collection, 'url') ||\n        urlError();\n      if (this.isNew()) return base;\n      var id = this.get(this.idAttribute);\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return !this.has(this.idAttribute);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend({}, options, {validate: true}));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model, mapped to the\n  // number of arguments they take.\n  var modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,\n      omit: 0, chain: 1, isEmpty: 1};\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  addUnderscoreMethods(Model, modelMethods, 'attributes');\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analogous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Splices `insert` into `array` at index `at`.\n  var splice = function(array, insert, at) {\n    at = Math.min(Math.max(at, 0), array.length);\n    var tail = Array(array.length - at);\n    var length = insert.length;\n    var i;\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n  };\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model) { return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set. `models` may be Backbone\n    // Models or raw JavaScript objects to be converted to Models, or any\n    // combination of the two.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      options = _.extend({}, options);\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n      var removed = this._removeModels(models, options);\n      if (!options.silent && removed.length) {\n        options.changes = {added: [], merged: [], removed: removed};\n        this.trigger('update', this, options);\n      }\n      return singular ? removed[0] : removed;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      if (models == null) return;\n\n      options = _.extend({}, setOptions, options);\n      if (options.parse && !this._isModel(models)) {\n        models = this.parse(models, options) || [];\n      }\n\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n\n      var at = options.at;\n      if (at != null) at = +at;\n      if (at > this.length) at = this.length;\n      if (at < 0) at += this.length + 1;\n\n      var set = [];\n      var toAdd = [];\n      var toMerge = [];\n      var toRemove = [];\n      var modelMap = {};\n\n      var add = options.add;\n      var merge = options.merge;\n      var remove = options.remove;\n\n      var sort = false;\n      var sortable = this.comparator && at == null && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      var model, i;\n      for (i = 0; i < models.length; i++) {\n        model = models[i];\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        var existing = this.get(model);\n        if (existing) {\n          if (merge && model !== existing) {\n            var attrs = this._isModel(model) ? model.attributes : model;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            toMerge.push(existing);\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n          }\n          if (!modelMap[existing.cid]) {\n            modelMap[existing.cid] = true;\n            set.push(existing);\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(model, options);\n          if (model) {\n            toAdd.push(model);\n            this._addReference(model, options);\n            modelMap[model.cid] = true;\n            set.push(model);\n          }\n        }\n      }\n\n      // Remove stale models.\n      if (remove) {\n        for (i = 0; i < this.length; i++) {\n          model = this.models[i];\n          if (!modelMap[model.cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this._removeModels(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      var orderChanged = false;\n      var replace = !sortable && add && remove;\n      if (set.length && replace) {\n        orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {\n          return m !== set[index];\n        });\n        this.models.length = 0;\n        splice(this.models, set, 0);\n        this.length = this.models.length;\n      } else if (toAdd.length) {\n        if (sortable) sort = true;\n        splice(this.models, toAdd, at == null ? this.length : at);\n        this.length = this.models.length;\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\n      if (!options.silent) {\n        for (i = 0; i < toAdd.length; i++) {\n          if (at != null) options.index = at + i;\n          model = toAdd[i];\n          model.trigger('add', model, this, options);\n        }\n        if (sort || orderChanged) this.trigger('sort', this, options);\n        if (toAdd.length || toRemove.length || toMerge.length) {\n          options.changes = {\n            added: toAdd,\n            removed: toRemove,\n            merged: toMerge\n          };\n          this.trigger('update', this, options);\n        }\n      }\n\n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options = options ? _.clone(options) : {};\n      for (var i = 0; i < this.models.length; i++) {\n        this._removeReference(this.models[i], options);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      return this.remove(model, options);\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      return this.remove(model, options);\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id, cid, model object with id or cid\n    // properties, or an attributes object that is transformed through modelId.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj] ||\n        this._byId[this.modelId(obj.attributes || obj)] ||\n        obj.cid && this._byId[obj.cid];\n    },\n\n    // Returns `true` if the model is in the collection.\n    has: function(obj) {\n      return this.get(obj) != null;\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      if (index < 0) index += this.length;\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      return this[first ? 'find' : 'filter'](attrs);\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      var comparator = this.comparator;\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      var length = comparator.length;\n      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);\n\n      // Run sort based on type of `comparator`.\n      if (length === 1 || _.isString(comparator)) {\n        this.models = this.sortBy(comparator);\n      } else {\n        this.models.sort(comparator);\n      }\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return this.map(attr + '');\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success.call(options.context, collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      var wait = options.wait;\n      model = this._prepareModel(model, options);\n      if (!model) return false;\n      if (!wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(m, resp, callbackOpts) {\n        if (wait) collection.add(m, callbackOpts);\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models, {\n        model: this.model,\n        comparator: this.comparator\n      });\n    },\n\n    // Define how to uniquely identify models in the collection.\n    modelId: function(attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (this._isModel(attrs)) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method called by both remove and set.\n    _removeModels: function(models, options) {\n      var removed = [];\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n\n        // Remove references before triggering 'remove' event to prevent an\n        // infinite loop. #3693\n        delete this._byId[model.cid];\n        var id = this.modelId(model.attributes);\n        if (id != null) delete this._byId[id];\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed;\n    },\n\n    // Method for checking whether an object should be considered a model for\n    // the purposes of adding to the collection.\n    _isModel: function(model) {\n      return model instanceof Model;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n      this._byId[model.cid] = model;\n      var id = this.modelId(model.attributes);\n      if (id != null) this._byId[id] = model;\n      model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes);\n      if (id != null) delete this._byId[id];\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if (model) {\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\n        if (event === 'destroy') this.remove(model, options);\n        if (event === 'change') {\n          var prevId = this.modelId(model.previousAttributes());\n          var id = this.modelId(model.attributes);\n          if (prevId !== id) {\n            if (prevId != null) delete this._byId[prevId];\n            if (id != null) this._byId[id] = model;\n          }\n        }\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,\n      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,\n      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,\n      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\n      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\n      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\n      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,\n      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  addUnderscoreMethods(Collection, collectionMethods, 'models');\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be set as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this._removeElement();\n      this.stopListening();\n      return this;\n    },\n\n    // Remove this view's element from the document and all event listeners\n    // attached to it. Exposed for subclasses using an alternative DOM\n    // manipulation API.\n    _removeElement: function() {\n      this.$el.remove();\n    },\n\n    // Change the view's element (`this.el` property) and re-delegate the\n    // view's events on the new element.\n    setElement: function(element) {\n      this.undelegateEvents();\n      this._setElement(element);\n      this.delegateEvents();\n      return this;\n    },\n\n    // Creates the `this.el` and `this.$el` references for this view using the\n    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n    // context or an element. Subclasses can override this to utilize an\n    // alternative DOM manipulation API and are only required to set the\n    // `this.el` property.\n    _setElement: function(el) {\n      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n      this.el = this.$el[0];\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    delegateEvents: function(events) {\n      events || (events = _.result(this, 'events'));\n      if (!events) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[method];\n        if (!method) continue;\n        var match = key.match(delegateEventSplitter);\n        this.delegate(match[1], match[2], _.bind(method, this));\n      }\n      return this;\n    },\n\n    // Add a single event listener to the view's element (or a child element\n    // using `selector`). This only works for delegate-able events: not `focus`,\n    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n    delegate: function(eventName, selector, listener) {\n      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view by `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // A finer-grained `undelegateEvents` for removing a single delegated event.\n    // `selector` and `listener` are both optional.\n    undelegate: function(eventName, selector, listener) {\n      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Produces a DOM element to be assigned to your view. Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _createElement: function(tagName) {\n      return document.createElement(tagName);\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        this.setElement(this._createElement(_.result(this, 'tagName')));\n        this._setAttributes(attrs);\n      } else {\n        this.setElement(_.result(this, 'el'));\n      }\n    },\n\n    // Set attributes from a hash on this view's element.  Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _setAttributes: function(attributes) {\n      this.$el.attr(attributes);\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // Pass along `textStatus` and `errorThrown` from jQuery.\n    var error = options.error;\n    options.error = function(xhr, textStatus, errorThrown) {\n      options.textStatus = textStatus;\n      options.errorThrown = errorThrown;\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\n    };\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch': 'PATCH',\n    'delete': 'DELETE',\n    'read': 'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        if (router.execute(callback, args, name) !== false) {\n          router.trigger.apply(router, ['route:' + name].concat(args));\n          router.trigger('route', name, args);\n          Backbone.history.trigger('route', router, name, args);\n        }\n      });\n      return this;\n    },\n\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function(callback, args, name) {\n      if (callback) callback.apply(this, args);\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^/?]+)';\n                   })\n                   .replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    this.checkUrl = _.bind(this.checkUrl, this);\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for stripping urls of hash.\n  var pathStripper = /#.*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Are we at the app root?\n    atRoot: function() {\n      var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\n      return path === this.root && !this.getSearch();\n    },\n\n    // Does the pathname match the root?\n    matchRoot: function() {\n      var path = this.decodeFragment(this.location.pathname);\n      var rootPath = path.slice(0, this.root.length - 1) + '/';\n      return rootPath === this.root;\n    },\n\n    // Unicode characters in `location.pathname` are percent encoded so they're\n    // decoded for comparison. `%25` should not be decoded since it may be part\n    // of an encoded parameter.\n    decodeFragment: function(fragment) {\n      return decodeURI(fragment.replace(/%25/g, '%2525'));\n    },\n\n    // In IE6, the hash fragment and search params are incorrect if the\n    // fragment contains `?`.\n    getSearch: function() {\n      var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\n      return match ? match[0] : '';\n    },\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the pathname and search params, without the root.\n    getPath: function() {\n      var path = this.decodeFragment(\n        this.location.pathname + this.getSearch()\n      ).slice(this.root.length - 1);\n      return path.charAt(0) === '/' ? path.slice(1) : path;\n    },\n\n    // Get the cross-browser normalized URL fragment from the path or hash.\n    getFragment: function(fragment) {\n      if (fragment == null) {\n        if (this._usePushState || !this._wantsHashChange) {\n          fragment = this.getPath();\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error('Backbone.history has already been started');\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);\n      this._useHashChange   = this._wantsHashChange && this._hasHashChange;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.history && this.history.pushState);\n      this._usePushState    = this._wantsPushState && this._hasPushState;\n      this.fragment         = this.getFragment();\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          var rootPath = this.root.slice(0, -1) || '/';\n          this.location.replace(rootPath + '#' + this.getPath());\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot()) {\n          this.navigate(this.getHash(), {replace: true});\n        }\n\n      }\n\n      // Proxy an iframe to handle location events if the browser doesn't\n      // support the `hashchange` event, HTML5 history, or the user wants\n      // `hashChange` but not `pushState`.\n      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n        this.iframe = document.createElement('iframe');\n        this.iframe.src = 'javascript:0';\n        this.iframe.style.display = 'none';\n        this.iframe.tabIndex = -1;\n        var body = document.body;\n        // Using `appendChild` will throw on IE < 9 if the document is not ready.\n        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n        iWindow.document.open();\n        iWindow.document.close();\n        iWindow.location.hash = '#' + this.fragment;\n      }\n\n      // Add a cross-platform `addEventListener` shim for older browsers.\n      var addEventListener = window.addEventListener || function(eventName, listener) {\n        return attachEvent('on' + eventName, listener);\n      };\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._usePushState) {\n        addEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        addEventListener('hashchange', this.checkUrl, false);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      // Add a cross-platform `removeEventListener` shim for older browsers.\n      var removeEventListener = window.removeEventListener || function(eventName, listener) {\n        return detachEvent('on' + eventName, listener);\n      };\n\n      // Remove window listeners.\n      if (this._usePushState) {\n        removeEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        removeEventListener('hashchange', this.checkUrl, false);\n      }\n\n      // Clean up the iframe if necessary.\n      if (this.iframe) {\n        document.body.removeChild(this.iframe);\n        this.iframe = null;\n      }\n\n      // Some environments will throw when clearing an undefined interval.\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n\n      // If the user pressed the back button, the iframe's hash will have\n      // changed and we should use that for comparison.\n      if (current === this.fragment && this.iframe) {\n        current = this.getHash(this.iframe.contentWindow);\n      }\n\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      // If the root doesn't match, no routes can match either.\n      if (!this.matchRoot()) return false;\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.some(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      // Normalize the fragment.\n      fragment = this.getFragment(fragment || '');\n\n      // Don't include a trailing slash on the root.\n      var rootPath = this.root;\n      if (fragment === '' || fragment.charAt(0) === '?') {\n        rootPath = rootPath.slice(0, -1) || '/';\n      }\n      var url = rootPath + fragment;\n\n      // Strip the hash and decode for matching.\n      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._usePushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {\n          var iWindow = this.iframe.contentWindow;\n\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if (!options.replace) {\n            iWindow.document.open();\n            iWindow.document.close();\n          }\n\n          this._updateHash(iWindow.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function and add the prototype properties.\n    child.prototype = _.create(parent.prototype, protoProps);\n    child.prototype.constructor = child;\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error.call(options.context, model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n});\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(141)))\n\n/***/ }),\n\n/***/ 141:\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n\n/***/ 151:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=\\\"input-file-status-ui\\\">\\n    <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n        <% _.each(messages, function (message) { %>\\n        <div><%- message %></div>\\n        <% }); %>\\n    </div>\\n</div>\\n\";\n\n/***/ }),\n\n/***/ 152:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=\\\"input-file-status-ui\\\">\\n    <div class=\\\"progress\\\">\\n        <div class=\\\"progress-bar progress-bar-striped active\\\" role=\\\"progressbar\\\" aria-valuenow=\\\"45\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" style=\\\"width: 100%\\\">\\n            <span class=\\\"sr-only\\\">Loading...</span>\\n        </div>\\n    </div>\\n    <div class=\\\"progress-text text-muted\\\">Loading.  Please wait...</div>\\n</div>\\n\";\n\n/***/ }),\n\n/***/ 153:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<form class=\\\"input-file-upload-form\\\" enctype=\\\"multipart/form-data\\\" action=\\\"\\\" method=\\\"POST\\\">\\n    <input class=\\\"input-file-uploader\\\" type=\\\"file\\\" name=\\\"<%- fileInputName %>\\\" />\\n</form>\\n\";\n\n/***/ }),\n\n/***/ 154:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=\\\"input-file-status-ui\\\">\\n    <% if (thumbnail) { %>\\n    <div class=\\\"panel panel-default\\\">\\n        <div class=\\\"panel-body\\\">\\n            <a target=\\\"_blank\\\" href=\\\"<%- url %>\\\">\\n                <div class=\\\"thumbnail\\\">\\n                    <img src=\\\"<%- thumbnail %>\\\" />\\n                </div>\\n\\n                <span class=\\\"glyphicon glyphicon-file\\\"></span>\\n                <%- url.split('/').pop() %>\\n            </a>\\n        </div>\\n    </div>\\n    <% } else { %>\\n    <a target=\\\"_blank\\\" href=\\\"<%- url %>\\\">\\n        <span class=\\\"glyphicon glyphicon-file\\\"></span>\\n        <%- url.split('/').pop() %>\\n    </a>\\n    <% } %>\\n\\n\\n    <div class=\\\"btn-group btn-group-justified\\\" role=\\\"group\\\">\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-xs btn-remove\\\"><span class=\\\"glyphicon glyphicon-remove\\\"></span> Remove</button>\\n        </div>\\n        <!--\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-xs btn-copy\\\"><span class=\\\"glyphicon glyphicon-copy\\\"></span> Copy</button>\\n        </div>\\n        -->\\n    </div>\\n</div>\\n\";\n\n/***/ }),\n\n/***/ 169:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__upload_template_html__ = __webpack_require__(153);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__upload_template_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__upload_template_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__value_template_html__ = __webpack_require__(154);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__value_template_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__value_template_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__progress_template_html__ = __webpack_require__(152);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__progress_template_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__progress_template_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__error_messages_template_html__ = __webpack_require__(151);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__error_messages_template_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__error_messages_template_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_underscore__ = __webpack_require__(117);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_underscore__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_backbone__ = __webpack_require__(137);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_backbone__);\n\n\n\n\n\n\n\nvar uploadTemplate = __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.template(__WEBPACK_IMPORTED_MODULE_0__upload_template_html___default.a),\n    valueTemplate = __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.template(__WEBPACK_IMPORTED_MODULE_1__value_template_html___default.a),\n    progressTemplate = __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.template(__WEBPACK_IMPORTED_MODULE_2__progress_template_html___default.a),\n    errorMessagesTemplate = __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.template(__WEBPACK_IMPORTED_MODULE_3__error_messages_template_html___default.a);\n\nvar UploadView = __WEBPACK_IMPORTED_MODULE_5_backbone___default.a.View.extend({\n    events: {\n        'change input': 'handleFileSelected'\n    },\n\n    setValueInput: function setValueInput($valueInput) {\n        this.$valueInput = $valueInput;\n        this.$wrapper = $valueInput.parent();\n\n        return this;\n    },\n\n    setFileInputName: function setFileInputName(fileInputName) {\n        this.fileInputName = fileInputName;\n\n        return this;\n    },\n\n    setFileThumbnail: function setFileThumbnail(fileThumbnail) {\n        this.fileThumbnail = fileThumbnail;\n        return this;\n    },\n\n    setFileUrl: function setFileUrl(fileUrl) {\n        this.fileUrl = fileUrl;\n        return this;\n    },\n\n    setActionUrl: function setActionUrl(actionUrl) {\n        this.actionUrl = actionUrl;\n\n        return this;\n    },\n\n    render: function render() {\n        this.$el.html(uploadTemplate({\n            fileInputName: this.fileInputName\n        }));\n\n        this.$el.find('input').click();\n\n        if (this.$valueInput.val()) {\n            var url = this.$valueInput.val();\n            if (this.fileUrl) {\n                url = this.fileUrl;\n            }\n\n            this.renderFileValue(url, this.fileThumbnail);\n        }\n\n        return this;\n    },\n\n    renderFileValue: function renderFileValue(url, thumbnail) {\n        this.clearStatusUi();\n\n        // @todo Refactor value UI into a sub-view so we can use Backbone event delegation for the buttons\n        this.$wrapper.find('.value-wrapper').append(valueTemplate({\n            url: url,\n            thumbnail: thumbnail\n        }));\n\n        this.$wrapper.on('click', '.btn-remove', __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.bind(function (e) {\n            e.preventDefault();\n            this.$valueInput.val('');\n            this.clearStatusUi();\n        }, this));\n\n        this.$wrapper.on('click', '.btn-copy', __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.bind(function (e) {\n            e.preventDefault();\n            this.$valueInput.val('');\n        }, this));\n    },\n\n    renderErrorMessages: function renderErrorMessages(messages) {\n        this.clearStatusUi();\n\n        this.$wrapper.append(errorMessagesTemplate({\n            messages: messages\n        }));\n    },\n\n    renderProgressBar: function renderProgressBar() {\n        this.clearStatusUi();\n\n        this.$wrapper.find('.value-wrapper').append(progressTemplate({}));\n    },\n\n    clearStatusUi: function clearStatusUi() {\n        this.$wrapper.find('.input-file-status-ui').remove();\n    },\n\n    handleFileSelected: function handleFileSelected(e) {\n        var files = e.target.files,\n            data = new FormData();\n\n        __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.each(files, function (file) {\n            data.append(this.$el.find('input').attr('name'), file);\n        }, this);\n\n        this.renderProgressBar();\n\n        $.ajax({\n            url: this.actionUrl,\n            type: 'POST',\n            data: data,\n            cache: false,\n            dataType: 'json',\n            processData: false,\n            contentType: false,\n            success: __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.bind(function (response) {\n                if (!response || 'success' !== response.result) {\n                    this.renderErrorMessages(response.messages);\n                } else {\n                    this.$valueInput.val(response.value).trigger('change');\n\n                    this.renderFileValue(response.url, response.thumbnail);\n                }\n            }, this),\n            error: __WEBPACK_IMPORTED_MODULE_4_underscore___default.a.bind(function () {\n                this.renderErrorMessages(['There was an error uploading the selected file.  Please try again.']);\n            }, this)\n        });\n    }\n});\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (UploadView);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 2.js","import UploadView from './input-file/upload-view';\n\nclass InputFile {\n    constructor(selector = '.btn-input-file') {\n        if (!selector.length) {\n            selector = '.btn-input-file'\n        }\n\n        // Render initial input state\n        $(selector).each(\n            function (index, button) {\n                var input,\n                    view = new UploadView();\n\n                button = $(button);\n                input  = $(button.data('value-input'));\n\n                if (input.val()) {\n                    var url = input.val();\n                    if (button.data('file-url')) {\n                        url = button.data('file-url');\n                    }\n\n                    view\n                        .setValueInput(input)\n                        .setFileThumbnail(button.data('file-thumbnail'))\n                        .setFileUrl(button.data('file-url'))\n                        .renderFileValue(url, button.data('file-thumbnail'));\n                }\n            }\n        );\n\n        // Handle attempt to upload a file\n        $(document).on(\n            'click',\n            selector,\n            function (e) {\n                var view   = new UploadView(),\n                    button = $(this);\n\n                e.preventDefault();\n\n                view\n                    .setValueInput($(button.data('value-input')))\n                    .setFileInputName(button.data('file-input-name'))\n                    .setActionUrl(button.data('action-url'));\n\n                document.body.appendChild(view.render().el);\n            }\n        );\n    }\n}\n\nexport default InputFile;\n\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/input-file.js","//     Backbone.js 1.3.3\n\n//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(factory) {\n\n  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\n  // We use `self` instead of `window` for `WebWorker` support.\n  var root = (typeof self == 'object' && self.self === self && self) ||\n            (typeof global == 'object' && global.global === global && global);\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (typeof define === 'function' && define.amd) {\n    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    });\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore'), $;\n    try { $ = require('jquery'); } catch (e) {}\n    factory(root, exports, _, $);\n\n  // Finally, as a browser global.\n  } else {\n    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n})(function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create a local reference to a common array method we'll want to use later.\n  var slice = Array.prototype.slice;\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.3.3';\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... this will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Proxy Backbone class methods to Underscore functions, wrapping the model's\n  // `attributes` object or collection's `models` array behind the scenes.\n  //\n  // collection.filter(function(model) { return model.get('age') > 10 });\n  // collection.each(this.addView);\n  //\n  // `Function#apply` can be slow so we use the method's arg count, if we know it.\n  var addMethod = function(length, method, attribute) {\n    switch (length) {\n      case 1: return function() {\n        return _[method](this[attribute]);\n      };\n      case 2: return function(value) {\n        return _[method](this[attribute], value);\n      };\n      case 3: return function(iteratee, context) {\n        return _[method](this[attribute], cb(iteratee, this), context);\n      };\n      case 4: return function(iteratee, defaultVal, context) {\n        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);\n      };\n      default: return function() {\n        var args = slice.call(arguments);\n        args.unshift(this[attribute]);\n        return _[method].apply(_, args);\n      };\n    }\n  };\n  var addUnderscoreMethods = function(Class, methods, attribute) {\n    _.each(methods, function(length, method) {\n      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);\n    });\n  };\n\n  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\n  var cb = function(iteratee, instance) {\n    if (_.isFunction(iteratee)) return iteratee;\n    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\n    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };\n    return iteratee;\n  };\n  var modelMatcher = function(attrs) {\n    var matcher = _.matches(attrs);\n    return function(model) {\n      return matcher(model.attributes);\n    };\n  };\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // a custom event channel. You may bind a callback to an event with `on` or\n  // remove with `off`; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {};\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Iterates over the standard `event, callback` (as well as the fancy multiple\n  // space-separated events `\"change blur\", callback` and jQuery-style event\n  // maps `{event: callback}`).\n  var eventsApi = function(iteratee, events, name, callback, opts) {\n    var i = 0, names;\n    if (name && typeof name === 'object') {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n      for (names = _.keys(name); i < names.length ; i++) {\n        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n      }\n    } else if (name && eventSplitter.test(name)) {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++) {\n        events = iteratee(events, names[i], callback, opts);\n      }\n    } else {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n    }\n    return events;\n  };\n\n  // Bind an event to a `callback` function. Passing `\"all\"` will bind\n  // the callback to all events fired.\n  Events.on = function(name, callback, context) {\n    return internalOn(this, name, callback, context);\n  };\n\n  // Guard the `listening` argument from the public API.\n  var internalOn = function(obj, name, callback, context, listening) {\n    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {\n      context: context,\n      ctx: obj,\n      listening: listening\n    });\n\n    if (listening) {\n      var listeners = obj._listeners || (obj._listeners = {});\n      listeners[listening.id] = listening;\n    }\n\n    return obj;\n  };\n\n  // Inversion-of-control versions of `on`. Tell *this* object to listen to\n  // an event in another object... keeping track of what it's listening to\n  // for easier unbinding later.\n  Events.listenTo = function(obj, name, callback) {\n    if (!obj) return this;\n    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n    var listeningTo = this._listeningTo || (this._listeningTo = {});\n    var listening = listeningTo[id];\n\n    // This object is not listening to any other events on `obj` yet.\n    // Setup the necessary references to track the listening callbacks.\n    if (!listening) {\n      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));\n      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};\n    }\n\n    // Bind callbacks on obj, and keep track of them on listening.\n    internalOn(obj, name, callback, this, listening);\n    return this;\n  };\n\n  // The reducing API that adds a callback to the `events` object.\n  var onApi = function(events, name, callback, options) {\n    if (callback) {\n      var handlers = events[name] || (events[name] = []);\n      var context = options.context, ctx = options.ctx, listening = options.listening;\n      if (listening) listening.count++;\n\n      handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});\n    }\n    return events;\n  };\n\n  // Remove one or many callbacks. If `context` is null, removes all\n  // callbacks with that function. If `callback` is null, removes all\n  // callbacks for the event. If `name` is null, removes all bound\n  // callbacks for all events.\n  Events.off = function(name, callback, context) {\n    if (!this._events) return this;\n    this._events = eventsApi(offApi, this._events, name, callback, {\n      context: context,\n      listeners: this._listeners\n    });\n    return this;\n  };\n\n  // Tell this object to stop listening to either specific events ... or\n  // to every object it's currently listening to.\n  Events.stopListening = function(obj, name, callback) {\n    var listeningTo = this._listeningTo;\n    if (!listeningTo) return this;\n\n    var ids = obj ? [obj._listenId] : _.keys(listeningTo);\n\n    for (var i = 0; i < ids.length; i++) {\n      var listening = listeningTo[ids[i]];\n\n      // If listening doesn't exist, this object is not currently\n      // listening to obj. Break out early.\n      if (!listening) break;\n\n      listening.obj.off(name, callback, this);\n    }\n\n    return this;\n  };\n\n  // The reducing API that removes a callback from the `events` object.\n  var offApi = function(events, name, callback, options) {\n    if (!events) return;\n\n    var i = 0, listening;\n    var context = options.context, listeners = options.listeners;\n\n    // Delete all events listeners and \"drop\" events.\n    if (!name && !callback && !context) {\n      var ids = _.keys(listeners);\n      for (; i < ids.length; i++) {\n        listening = listeners[ids[i]];\n        delete listeners[listening.id];\n        delete listening.listeningTo[listening.objId];\n      }\n      return;\n    }\n\n    var names = name ? [name] : _.keys(events);\n    for (; i < names.length; i++) {\n      name = names[i];\n      var handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) break;\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      var remaining = [];\n      for (var j = 0; j < handlers.length; j++) {\n        var handler = handlers[j];\n        if (\n          callback && callback !== handler.callback &&\n            callback !== handler.callback._callback ||\n              context && context !== handler.context\n        ) {\n          remaining.push(handler);\n        } else {\n          listening = handler.listening;\n          if (listening && --listening.count === 0) {\n            delete listeners[listening.id];\n            delete listening.listeningTo[listening.objId];\n          }\n        }\n      }\n\n      // Update tail event if the list has any events.  Otherwise, clean up.\n      if (remaining.length) {\n        events[name] = remaining;\n      } else {\n        delete events[name];\n      }\n    }\n    return events;\n  };\n\n  // Bind an event to only be triggered a single time. After the first time\n  // the callback is invoked, its listener will be removed. If multiple events\n  // are passed in using the space-separated syntax, the handler will fire\n  // once for each event, not once for a combination of all events.\n  Events.once = function(name, callback, context) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\n    if (typeof name === 'string' && context == null) callback = void 0;\n    return this.on(events, callback, context);\n  };\n\n  // Inversion-of-control versions of `once`.\n  Events.listenToOnce = function(obj, name, callback) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\n    return this.listenTo(obj, events);\n  };\n\n  // Reduces the event callbacks into a map of `{event: onceWrapper}`.\n  // `offer` unbinds the `onceWrapper` after it has been called.\n  var onceMap = function(map, name, callback, offer) {\n    if (callback) {\n      var once = map[name] = _.once(function() {\n        offer(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n    }\n    return map;\n  };\n\n  // Trigger one or many events, firing all bound callbacks. Callbacks are\n  // passed the same arguments as `trigger` is, apart from the event name\n  // (unless you're listening on `\"all\"`, which will cause your callback to\n  // receive the true name of the event as the first argument).\n  Events.trigger = function(name) {\n    if (!this._events) return this;\n\n    var length = Math.max(0, arguments.length - 1);\n    var args = Array(length);\n    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\n\n    eventsApi(triggerApi, this._events, name, void 0, args);\n    return this;\n  };\n\n  // Handles triggering the appropriate event callbacks.\n  var triggerApi = function(objEvents, name, callback, args) {\n    if (objEvents) {\n      var events = objEvents[name];\n      var allEvents = objEvents.all;\n      if (events && allEvents) allEvents = allEvents.slice();\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, [name].concat(args));\n    }\n    return objEvents;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n    }\n  };\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    var defaults = _.result(this, 'defaults');\n    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // The prefix is used to create the client id which is used to identify models locally.\n    // You may want to override this if you're experiencing name clashes with model ids.\n    cidPrefix: 'c',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Special-cased proxy to underscore's `_.matches` method.\n    matches: function(attrs) {\n      return !!_.iteratee(attrs, this)(this.attributes);\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      var unset      = options.unset;\n      var silent     = options.silent;\n      var changes    = [];\n      var changing   = this._changing;\n      this._changing = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n\n      var current = this.attributes;\n      var changed = this.changed;\n      var prev    = this._previousAttributes;\n\n      // For each `set` attribute, update or delete the current value.\n      for (var attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          changed[attr] = val;\n        } else {\n          delete changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Update the `id`.\n      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = options;\n        for (var i = 0; i < changes.length; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      var changed = {};\n      for (var attr in diff) {\n        var val = diff[attr];\n        if (_.isEqual(old[attr], val)) continue;\n        changed[attr] = val;\n      }\n      return _.size(changed) ? changed : false;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server, merging the response with the model's\n    // local attributes. Any changed attributes will trigger a \"change\" event.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (!model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true, parse: true}, options);\n      var wait = options.wait;\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !wait) {\n        if (!this.set(attrs, options)) return false;\n      } else if (!this._validate(attrs, options)) {\n        return false;\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      var model = this;\n      var success = options.success;\n      var attributes = this.attributes;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n        if (serverAttrs && !model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\n      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\n      var xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n      var wait = options.wait;\n\n      var destroy = function() {\n        model.stopListening();\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (wait) destroy();\n        if (success) success.call(options.context, model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      var xhr = false;\n      if (this.isNew()) {\n        _.defer(options.success);\n      } else {\n        wrapError(this, options);\n        xhr = this.sync('delete', this, options);\n      }\n      if (!wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base =\n        _.result(this, 'urlRoot') ||\n        _.result(this.collection, 'url') ||\n        urlError();\n      if (this.isNew()) return base;\n      var id = this.get(this.idAttribute);\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return !this.has(this.idAttribute);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend({}, options, {validate: true}));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model, mapped to the\n  // number of arguments they take.\n  var modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,\n      omit: 0, chain: 1, isEmpty: 1};\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  addUnderscoreMethods(Model, modelMethods, 'attributes');\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analogous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Splices `insert` into `array` at index `at`.\n  var splice = function(array, insert, at) {\n    at = Math.min(Math.max(at, 0), array.length);\n    var tail = Array(array.length - at);\n    var length = insert.length;\n    var i;\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n  };\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model) { return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set. `models` may be Backbone\n    // Models or raw JavaScript objects to be converted to Models, or any\n    // combination of the two.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      options = _.extend({}, options);\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n      var removed = this._removeModels(models, options);\n      if (!options.silent && removed.length) {\n        options.changes = {added: [], merged: [], removed: removed};\n        this.trigger('update', this, options);\n      }\n      return singular ? removed[0] : removed;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      if (models == null) return;\n\n      options = _.extend({}, setOptions, options);\n      if (options.parse && !this._isModel(models)) {\n        models = this.parse(models, options) || [];\n      }\n\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n\n      var at = options.at;\n      if (at != null) at = +at;\n      if (at > this.length) at = this.length;\n      if (at < 0) at += this.length + 1;\n\n      var set = [];\n      var toAdd = [];\n      var toMerge = [];\n      var toRemove = [];\n      var modelMap = {};\n\n      var add = options.add;\n      var merge = options.merge;\n      var remove = options.remove;\n\n      var sort = false;\n      var sortable = this.comparator && at == null && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      var model, i;\n      for (i = 0; i < models.length; i++) {\n        model = models[i];\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        var existing = this.get(model);\n        if (existing) {\n          if (merge && model !== existing) {\n            var attrs = this._isModel(model) ? model.attributes : model;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            toMerge.push(existing);\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n          }\n          if (!modelMap[existing.cid]) {\n            modelMap[existing.cid] = true;\n            set.push(existing);\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(model, options);\n          if (model) {\n            toAdd.push(model);\n            this._addReference(model, options);\n            modelMap[model.cid] = true;\n            set.push(model);\n          }\n        }\n      }\n\n      // Remove stale models.\n      if (remove) {\n        for (i = 0; i < this.length; i++) {\n          model = this.models[i];\n          if (!modelMap[model.cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this._removeModels(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      var orderChanged = false;\n      var replace = !sortable && add && remove;\n      if (set.length && replace) {\n        orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {\n          return m !== set[index];\n        });\n        this.models.length = 0;\n        splice(this.models, set, 0);\n        this.length = this.models.length;\n      } else if (toAdd.length) {\n        if (sortable) sort = true;\n        splice(this.models, toAdd, at == null ? this.length : at);\n        this.length = this.models.length;\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\n      if (!options.silent) {\n        for (i = 0; i < toAdd.length; i++) {\n          if (at != null) options.index = at + i;\n          model = toAdd[i];\n          model.trigger('add', model, this, options);\n        }\n        if (sort || orderChanged) this.trigger('sort', this, options);\n        if (toAdd.length || toRemove.length || toMerge.length) {\n          options.changes = {\n            added: toAdd,\n            removed: toRemove,\n            merged: toMerge\n          };\n          this.trigger('update', this, options);\n        }\n      }\n\n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options = options ? _.clone(options) : {};\n      for (var i = 0; i < this.models.length; i++) {\n        this._removeReference(this.models[i], options);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      return this.remove(model, options);\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      return this.remove(model, options);\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id, cid, model object with id or cid\n    // properties, or an attributes object that is transformed through modelId.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj] ||\n        this._byId[this.modelId(obj.attributes || obj)] ||\n        obj.cid && this._byId[obj.cid];\n    },\n\n    // Returns `true` if the model is in the collection.\n    has: function(obj) {\n      return this.get(obj) != null;\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      if (index < 0) index += this.length;\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      return this[first ? 'find' : 'filter'](attrs);\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      var comparator = this.comparator;\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      var length = comparator.length;\n      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);\n\n      // Run sort based on type of `comparator`.\n      if (length === 1 || _.isString(comparator)) {\n        this.models = this.sortBy(comparator);\n      } else {\n        this.models.sort(comparator);\n      }\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return this.map(attr + '');\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success.call(options.context, collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      var wait = options.wait;\n      model = this._prepareModel(model, options);\n      if (!model) return false;\n      if (!wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(m, resp, callbackOpts) {\n        if (wait) collection.add(m, callbackOpts);\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models, {\n        model: this.model,\n        comparator: this.comparator\n      });\n    },\n\n    // Define how to uniquely identify models in the collection.\n    modelId: function(attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (this._isModel(attrs)) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method called by both remove and set.\n    _removeModels: function(models, options) {\n      var removed = [];\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n\n        // Remove references before triggering 'remove' event to prevent an\n        // infinite loop. #3693\n        delete this._byId[model.cid];\n        var id = this.modelId(model.attributes);\n        if (id != null) delete this._byId[id];\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed;\n    },\n\n    // Method for checking whether an object should be considered a model for\n    // the purposes of adding to the collection.\n    _isModel: function(model) {\n      return model instanceof Model;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n      this._byId[model.cid] = model;\n      var id = this.modelId(model.attributes);\n      if (id != null) this._byId[id] = model;\n      model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes);\n      if (id != null) delete this._byId[id];\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if (model) {\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\n        if (event === 'destroy') this.remove(model, options);\n        if (event === 'change') {\n          var prevId = this.modelId(model.previousAttributes());\n          var id = this.modelId(model.attributes);\n          if (prevId !== id) {\n            if (prevId != null) delete this._byId[prevId];\n            if (id != null) this._byId[id] = model;\n          }\n        }\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,\n      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,\n      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,\n      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\n      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\n      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\n      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,\n      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  addUnderscoreMethods(Collection, collectionMethods, 'models');\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be set as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this._removeElement();\n      this.stopListening();\n      return this;\n    },\n\n    // Remove this view's element from the document and all event listeners\n    // attached to it. Exposed for subclasses using an alternative DOM\n    // manipulation API.\n    _removeElement: function() {\n      this.$el.remove();\n    },\n\n    // Change the view's element (`this.el` property) and re-delegate the\n    // view's events on the new element.\n    setElement: function(element) {\n      this.undelegateEvents();\n      this._setElement(element);\n      this.delegateEvents();\n      return this;\n    },\n\n    // Creates the `this.el` and `this.$el` references for this view using the\n    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n    // context or an element. Subclasses can override this to utilize an\n    // alternative DOM manipulation API and are only required to set the\n    // `this.el` property.\n    _setElement: function(el) {\n      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n      this.el = this.$el[0];\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    delegateEvents: function(events) {\n      events || (events = _.result(this, 'events'));\n      if (!events) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[method];\n        if (!method) continue;\n        var match = key.match(delegateEventSplitter);\n        this.delegate(match[1], match[2], _.bind(method, this));\n      }\n      return this;\n    },\n\n    // Add a single event listener to the view's element (or a child element\n    // using `selector`). This only works for delegate-able events: not `focus`,\n    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n    delegate: function(eventName, selector, listener) {\n      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view by `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // A finer-grained `undelegateEvents` for removing a single delegated event.\n    // `selector` and `listener` are both optional.\n    undelegate: function(eventName, selector, listener) {\n      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Produces a DOM element to be assigned to your view. Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _createElement: function(tagName) {\n      return document.createElement(tagName);\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        this.setElement(this._createElement(_.result(this, 'tagName')));\n        this._setAttributes(attrs);\n      } else {\n        this.setElement(_.result(this, 'el'));\n      }\n    },\n\n    // Set attributes from a hash on this view's element.  Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _setAttributes: function(attributes) {\n      this.$el.attr(attributes);\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // Pass along `textStatus` and `errorThrown` from jQuery.\n    var error = options.error;\n    options.error = function(xhr, textStatus, errorThrown) {\n      options.textStatus = textStatus;\n      options.errorThrown = errorThrown;\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\n    };\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch': 'PATCH',\n    'delete': 'DELETE',\n    'read': 'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        if (router.execute(callback, args, name) !== false) {\n          router.trigger.apply(router, ['route:' + name].concat(args));\n          router.trigger('route', name, args);\n          Backbone.history.trigger('route', router, name, args);\n        }\n      });\n      return this;\n    },\n\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function(callback, args, name) {\n      if (callback) callback.apply(this, args);\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^/?]+)';\n                   })\n                   .replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    this.checkUrl = _.bind(this.checkUrl, this);\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for stripping urls of hash.\n  var pathStripper = /#.*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Are we at the app root?\n    atRoot: function() {\n      var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\n      return path === this.root && !this.getSearch();\n    },\n\n    // Does the pathname match the root?\n    matchRoot: function() {\n      var path = this.decodeFragment(this.location.pathname);\n      var rootPath = path.slice(0, this.root.length - 1) + '/';\n      return rootPath === this.root;\n    },\n\n    // Unicode characters in `location.pathname` are percent encoded so they're\n    // decoded for comparison. `%25` should not be decoded since it may be part\n    // of an encoded parameter.\n    decodeFragment: function(fragment) {\n      return decodeURI(fragment.replace(/%25/g, '%2525'));\n    },\n\n    // In IE6, the hash fragment and search params are incorrect if the\n    // fragment contains `?`.\n    getSearch: function() {\n      var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\n      return match ? match[0] : '';\n    },\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the pathname and search params, without the root.\n    getPath: function() {\n      var path = this.decodeFragment(\n        this.location.pathname + this.getSearch()\n      ).slice(this.root.length - 1);\n      return path.charAt(0) === '/' ? path.slice(1) : path;\n    },\n\n    // Get the cross-browser normalized URL fragment from the path or hash.\n    getFragment: function(fragment) {\n      if (fragment == null) {\n        if (this._usePushState || !this._wantsHashChange) {\n          fragment = this.getPath();\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error('Backbone.history has already been started');\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);\n      this._useHashChange   = this._wantsHashChange && this._hasHashChange;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.history && this.history.pushState);\n      this._usePushState    = this._wantsPushState && this._hasPushState;\n      this.fragment         = this.getFragment();\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          var rootPath = this.root.slice(0, -1) || '/';\n          this.location.replace(rootPath + '#' + this.getPath());\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot()) {\n          this.navigate(this.getHash(), {replace: true});\n        }\n\n      }\n\n      // Proxy an iframe to handle location events if the browser doesn't\n      // support the `hashchange` event, HTML5 history, or the user wants\n      // `hashChange` but not `pushState`.\n      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n        this.iframe = document.createElement('iframe');\n        this.iframe.src = 'javascript:0';\n        this.iframe.style.display = 'none';\n        this.iframe.tabIndex = -1;\n        var body = document.body;\n        // Using `appendChild` will throw on IE < 9 if the document is not ready.\n        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n        iWindow.document.open();\n        iWindow.document.close();\n        iWindow.location.hash = '#' + this.fragment;\n      }\n\n      // Add a cross-platform `addEventListener` shim for older browsers.\n      var addEventListener = window.addEventListener || function(eventName, listener) {\n        return attachEvent('on' + eventName, listener);\n      };\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._usePushState) {\n        addEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        addEventListener('hashchange', this.checkUrl, false);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      // Add a cross-platform `removeEventListener` shim for older browsers.\n      var removeEventListener = window.removeEventListener || function(eventName, listener) {\n        return detachEvent('on' + eventName, listener);\n      };\n\n      // Remove window listeners.\n      if (this._usePushState) {\n        removeEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        removeEventListener('hashchange', this.checkUrl, false);\n      }\n\n      // Clean up the iframe if necessary.\n      if (this.iframe) {\n        document.body.removeChild(this.iframe);\n        this.iframe = null;\n      }\n\n      // Some environments will throw when clearing an undefined interval.\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n\n      // If the user pressed the back button, the iframe's hash will have\n      // changed and we should use that for comparison.\n      if (current === this.fragment && this.iframe) {\n        current = this.getHash(this.iframe.contentWindow);\n      }\n\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      // If the root doesn't match, no routes can match either.\n      if (!this.matchRoot()) return false;\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.some(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      // Normalize the fragment.\n      fragment = this.getFragment(fragment || '');\n\n      // Don't include a trailing slash on the root.\n      var rootPath = this.root;\n      if (fragment === '' || fragment.charAt(0) === '?') {\n        rootPath = rootPath.slice(0, -1) || '/';\n      }\n      var url = rootPath + fragment;\n\n      // Strip the hash and decode for matching.\n      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._usePushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {\n          var iWindow = this.iframe.contentWindow;\n\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if (!options.replace) {\n            iWindow.document.open();\n            iWindow.document.close();\n          }\n\n          this._updateHash(iWindow.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function and add the prototype properties.\n    child.prototype = _.create(parent.prototype, protoProps);\n    child.prototype.constructor = child;\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error.call(options.context, model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/backbone/backbone.js\n// module id = 137\n// module chunks = 0 1 2","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 141\n// module chunks = 0 1 2","module.exports = \"<div class=\\\"input-file-status-ui\\\">\\n    <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\n        <% _.each(messages, function (message) { %>\\n        <div><%- message %></div>\\n        <% }); %>\\n    </div>\\n</div>\\n\"\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/input-file/error-messages-template.html","module.exports = \"<div class=\\\"input-file-status-ui\\\">\\n    <div class=\\\"progress\\\">\\n        <div class=\\\"progress-bar progress-bar-striped active\\\" role=\\\"progressbar\\\" aria-valuenow=\\\"45\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\" style=\\\"width: 100%\\\">\\n            <span class=\\\"sr-only\\\">Loading...</span>\\n        </div>\\n    </div>\\n    <div class=\\\"progress-text text-muted\\\">Loading.  Please wait...</div>\\n</div>\\n\"\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/input-file/progress-template.html","module.exports = \"<form class=\\\"input-file-upload-form\\\" enctype=\\\"multipart/form-data\\\" action=\\\"\\\" method=\\\"POST\\\">\\n    <input class=\\\"input-file-uploader\\\" type=\\\"file\\\" name=\\\"<%- fileInputName %>\\\" />\\n</form>\\n\"\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/input-file/upload-template.html","module.exports = \"<div class=\\\"input-file-status-ui\\\">\\n    <% if (thumbnail) { %>\\n    <div class=\\\"panel panel-default\\\">\\n        <div class=\\\"panel-body\\\">\\n            <a target=\\\"_blank\\\" href=\\\"<%- url %>\\\">\\n                <div class=\\\"thumbnail\\\">\\n                    <img src=\\\"<%- thumbnail %>\\\" />\\n                </div>\\n\\n                <span class=\\\"glyphicon glyphicon-file\\\"></span>\\n                <%- url.split('/').pop() %>\\n            </a>\\n        </div>\\n    </div>\\n    <% } else { %>\\n    <a target=\\\"_blank\\\" href=\\\"<%- url %>\\\">\\n        <span class=\\\"glyphicon glyphicon-file\\\"></span>\\n        <%- url.split('/').pop() %>\\n    </a>\\n    <% } %>\\n\\n\\n    <div class=\\\"btn-group btn-group-justified\\\" role=\\\"group\\\">\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-xs btn-remove\\\"><span class=\\\"glyphicon glyphicon-remove\\\"></span> Remove</button>\\n        </div>\\n        <!--\\n        <div class=\\\"btn-group\\\" role=\\\"group\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-default btn-xs btn-copy\\\"><span class=\\\"glyphicon glyphicon-copy\\\"></span> Copy</button>\\n        </div>\\n        -->\\n    </div>\\n</div>\\n\"\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/input-file/value-template.html","import templateHtml from './upload-template.html';\nimport valueTemplateHtml from './value-template.html';\nimport progressTemplateHtml from './progress-template.html';\nimport errorMessagesTemplateHtml from './error-messages-template.html';\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\nvar uploadTemplate        = _.template(templateHtml),\n    valueTemplate         = _.template(valueTemplateHtml),\n    progressTemplate      = _.template(progressTemplateHtml),\n    errorMessagesTemplate = _.template(errorMessagesTemplateHtml);\n\nvar UploadView = Backbone.View.extend({\n    events: {\n        'change input': 'handleFileSelected'\n    },\n\n    setValueInput: function ($valueInput) {\n        this.$valueInput = $valueInput;\n        this.$wrapper    = $valueInput.parent();\n\n        return this;\n    },\n\n    setFileInputName: function (fileInputName) {\n        this.fileInputName = fileInputName;\n\n        return this;\n    },\n\n    setFileThumbnail: function (fileThumbnail) {\n        this.fileThumbnail = fileThumbnail;\n        return this;\n    },\n\n    setFileUrl: function (fileUrl) {\n        this.fileUrl = fileUrl;\n        return this;\n    },\n\n    setActionUrl: function(actionUrl) {\n        this.actionUrl = actionUrl;\n\n        return this;\n    },\n\n    render: function () {\n        this.$el.html(\n            uploadTemplate(\n                {\n                    fileInputName: this.fileInputName\n                }\n            )\n        );\n\n        this.$el.find('input').click();\n\n        if (this.$valueInput.val()) {\n            var url = this.$valueInput.val();\n            if (this.fileUrl) {\n                url = this.fileUrl;\n            }\n\n            this.renderFileValue(url, this.fileThumbnail);\n        }\n\n        return this;\n    },\n\n    renderFileValue: function (url, thumbnail) {\n        this.clearStatusUi();\n\n        // @todo Refactor value UI into a sub-view so we can use Backbone event delegation for the buttons\n        this.$wrapper.find('.value-wrapper').append(\n            valueTemplate(\n                {\n                    url: url,\n                    thumbnail: thumbnail\n                }\n            )\n        );\n\n        this.$wrapper.on(\n            'click',\n            '.btn-remove',\n            _.bind(\n                function (e) {\n                    e.preventDefault();\n                    this.$valueInput.val('');\n                    this.clearStatusUi();\n                },\n                this\n            )\n        );\n\n        this.$wrapper.on(\n            'click',\n            '.btn-copy',\n            _.bind(\n                function (e) {\n                    e.preventDefault();\n                    this.$valueInput.val('');\n                },\n                this\n            )\n        );\n    },\n\n    renderErrorMessages: function (messages) {\n        this.clearStatusUi();\n\n        this.$wrapper.append(\n            errorMessagesTemplate(\n                {\n                    messages: messages\n                }\n            )\n        )\n    },\n\n    renderProgressBar: function () {\n        this.clearStatusUi();\n\n        this.$wrapper.find('.value-wrapper').append(\n            progressTemplate(\n                {\n\n                }\n            )\n        );\n    },\n\n    clearStatusUi: function () {\n        this.$wrapper.find('.input-file-status-ui').remove();\n    },\n\n    handleFileSelected: function (e) {\n        var files = e.target.files,\n            data  = new FormData();\n\n        _.each(\n            files,\n            function (file) {\n                data.append(this.$el.find('input').attr('name'), file);\n            },\n            this\n        );\n\n        this.renderProgressBar();\n\n        $.ajax({\n            url: this.actionUrl,\n            type: 'POST',\n            data: data,\n            cache: false,\n            dataType: 'json',\n            processData: false,\n            contentType: false,\n            success: _.bind(\n                function (response) {\n                    if (!response || 'success' !== response.result) {\n                        this.renderErrorMessages(response.messages);\n                    } else {\n                        this.$valueInput.val(response.value).trigger('change');\n\n                        this.renderFileValue(response.url, response.thumbnail);\n                    }\n                },\n                this\n            ),\n            error: _.bind(\n                function () {\n                    this.renderErrorMessages(\n                        ['There was an error uploading the selected file.  Please try again.']\n                    );\n                },\n                this\n            )\n        });\n    }\n});\n\nexport default UploadView;\n\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/input-file/upload-view.js"],"sourceRoot":""}
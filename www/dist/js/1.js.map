{"version":3,"sources":["webpack:///1.js","webpack:///./www/src/js/sort-fields.js","webpack:///./~/backbone/backbone.js?b8b2","webpack:///(webpack)/buildin/global.js?3698","webpack:///./www/src/js/sort-fields/add-group-popover-template.html","webpack:///./www/src/js/sort-fields/list-field-template.html","webpack:///./www/src/js/sort-fields/list-template.html","webpack:///./www/src/js/sort-fields/add-group-popover-view.js","webpack:///./www/src/js/sort-fields/groups-collection.js","webpack:///./www/src/js/sort-fields/groups-view.js","webpack:///./www/src/js/sort-fields/list-view.js"],"names":["webpackJsonp","136","module","__webpack_exports__","__webpack_require__","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__sort_fields_groups_collection__","__WEBPACK_IMPORTED_MODULE_1__sort_fields_groups_view__","__WEBPACK_IMPORTED_MODULE_2__sort_fields_add_group_popover_view__","SortFields","this","collection","initializeWithGlobalVariable","$","on","e","val","JSON","stringify","toJSON","138","exports","global","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","factory","root","self","undefined","_","Backbone","apply","previousBackbone","slice","Array","prototype","VERSION","noConflict","emulateHTTP","emulateJSON","addMethod","length","method","attribute","iteratee","context","cb","defaultVal","args","call","arguments","unshift","addUnderscoreMethods","Class","methods","each","isFunction","isObject","_isModel","modelMatcher","isString","model","get","attrs","matcher","matches","attributes","Events","eventSplitter","eventsApi","events","name","callback","opts","names","i","keys","test","split","internalOn","obj","listening","_events","onApi","ctx","_listeners","id","listenTo","_listenId","uniqueId","listeningTo","_listeningTo","thisId","objId","count","options","handlers","push","off","offApi","listeners","stopListening","ids","remaining","j","handler","_callback","once","onceMap","bind","listenToOnce","map","offer","trigger","Math","max","triggerApi","objEvents","allEvents","all","triggerEvents","concat","ev","l","a1","a2","a3","unbind","extend","Model","cid","cidPrefix","parse","defaults","result","set","changed","initialize","validationError","idAttribute","clone","sync","attr","escape","has","key","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","isEqual","_pending","clear","hasChanged","isEmpty","changedAttributes","diff","old","size","previous","previousAttributes","fetch","success","resp","serverAttrs","wrapError","save","validate","wait","isNew","patch","xhr","destroy","defer","url","base","urlError","replace","encodeURIComponent","constructor","isValid","error","values","pairs","invert","pick","omit","chain","Collection","models","comparator","_reset","reset","setOptions","add","remove","merge","addOptions","splice","array","insert","at","min","tail","singular","isArray","removed","_removeModels","added","merged","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","existing","_prepareModel","_addReference","orderChanged","some","m","index","_removeReference","previousModels","pop","shift","_byId","modelId","where","first","findWhere","Error","sortBy","pluck","create","callbackOpts","indexOf","_onModelEvent","event","prevId","forEach","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","any","include","includes","contains","invoke","toArray","head","take","initial","rest","drop","last","without","difference","shuffle","lastIndexOf","sample","partition","groupBy","countBy","indexBy","findIndex","findLastIndex","View","viewOptions","_ensureElement","delegateEventSplitter","tagName","selector","$el","render","_removeElement","setElement","element","undelegateEvents","_setElement","delegateEvents","el","match","delegate","eventName","listener","undelegate","_createElement","document","createElement","className","_setAttributes","type","methodMap","params","dataType","data","contentType","_method","beforeSend","setRequestHeader","processData","textStatus","errorThrown","ajax","update","delete","read","Router","routes","_bindRoutes","optionalParam","namedParam","splatParam","escapeRegExp","route","isRegExp","_routeToRegExp","router","history","fragment","_extractParameters","execute","navigate","optional","RegExp","exec","param","decodeURIComponent","History","checkUrl","window","location","routeStripper","rootStripper","pathStripper","started","interval","atRoot","pathname","getSearch","matchRoot","decodeFragment","decodeURI","href","getHash","getPath","path","charAt","getFragment","_usePushState","_wantsHashChange","start","hashChange","_hasHashChange","documentMode","_useHashChange","_wantsPushState","pushState","_hasPushState","rootPath","iframe","src","style","display","tabIndex","body","iWindow","insertBefore","firstChild","contentWindow","open","close","hash","addEventListener","attachEvent","_checkUrlInterval","setInterval","loadUrl","stop","removeEventListener","detachEvent","removeChild","clearInterval","title","assign","_updateHash","protoProps","staticProps","child","parent","__super__","143","g","Function","eval","157","158","159","172","__WEBPACK_IMPORTED_MODULE_0__add_group_popover_template_html__","__WEBPACK_IMPORTED_MODULE_0__add_group_popover_template_html___default","n","__WEBPACK_IMPORTED_MODULE_1_underscore__","__WEBPACK_IMPORTED_MODULE_1_underscore___default","__WEBPACK_IMPORTED_MODULE_2_backbone__","__WEBPACK_IMPORTED_MODULE_2_backbone___default","AddGroupPopoverView","a","click #add-group","show.bs.popover #add-group","keydown .popover-content input:first","click .popover-content .btn","groups","popover","html","placement","content","setGroups","preventSubmission","preventDefault","focusInput","setTimeout","focus","addGroupOnEnter","keyCode","addGroup","173","__WEBPACK_IMPORTED_MODULE_0_underscore__","__WEBPACK_IMPORTED_MODULE_0_underscore___default","__WEBPACK_IMPORTED_MODULE_1_backbone__","__WEBPACK_IMPORTED_MODULE_1_backbone___default","allowEditing","animate","caption","sortIndex","fields","GroupsCollection","initialFieldGroupsConfig","group","174","__WEBPACK_IMPORTED_MODULE_0__list_view__","GroupsView","sortstop","hideTitle","empty","view","ungroupedModel","append","items","disableSelection","updateSortIndexes","list","175","__WEBPACK_IMPORTED_MODULE_0__list_template_html__","__WEBPACK_IMPORTED_MODULE_0__list_template_html___default","__WEBPACK_IMPORTED_MODULE_1__list_field_template_html__","__WEBPACK_IMPORTED_MODULE_1__list_field_template_html___default","__WEBPACK_IMPORTED_MODULE_2_underscore__","__WEBPACK_IMPORTED_MODULE_2_underscore___default","__WEBPACK_IMPORTED_MODULE_3_backbone__","__WEBPACK_IMPORTED_MODULE_3_backbone___default","listTemplate","template","fieldTemplate","ListView","sortremove","sortreceive","click .btn-remove","click .btn-edit","click .btn-save-title","click .btn-cancel","keydown .title-input","updateBadge","hide","velocity","connectWith","field","showTitleInput","show","saveTitleOnEnter","saveTitle","cancelTitleInput","suffix","text","updateModelFields","ui","label"],"mappings":"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","file":"1.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 136:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sort_fields_groups_collection__ = __webpack_require__(173);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__sort_fields_groups_view__ = __webpack_require__(174);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sort_fields_add_group_popover_view__ = __webpack_require__(172);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\n\nvar SortFields = function SortFields() {\n    _classCallCheck(this, SortFields);\n\n    var collection = new __WEBPACK_IMPORTED_MODULE_0__sort_fields_groups_collection__[\"a\" /* default */](),\n        popover = new __WEBPACK_IMPORTED_MODULE_2__sort_fields_add_group_popover_view__[\"a\" /* default */]({ collection: collection }),\n        groups = new __WEBPACK_IMPORTED_MODULE_1__sort_fields_groups_view__[\"a\" /* default */]({ collection: collection });\n\n    collection.initializeWithGlobalVariable();\n\n    $('#sort-form').on('submit', function (e) {\n        $('#sorted-fields').val(JSON.stringify(collection.toJSON()));\n    });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SortFields);\n\n/***/ }),\n\n/***/ 138:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Backbone.js 1.3.3\n\n//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(factory) {\n\n  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\n  // We use `self` instead of `window` for `WebWorker` support.\n  var root = (typeof self == 'object' && self.self === self && self) ||\n            (typeof global == 'object' && global.global === global && global);\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(117), __webpack_require__(142), exports], __WEBPACK_AMD_DEFINE_RESULT__ = function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore'), $;\n    try { $ = require('jquery'); } catch (e) {}\n    factory(root, exports, _, $);\n\n  // Finally, as a browser global.\n  } else {\n    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n})(function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create a local reference to a common array method we'll want to use later.\n  var slice = Array.prototype.slice;\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.3.3';\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... this will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Proxy Backbone class methods to Underscore functions, wrapping the model's\n  // `attributes` object or collection's `models` array behind the scenes.\n  //\n  // collection.filter(function(model) { return model.get('age') > 10 });\n  // collection.each(this.addView);\n  //\n  // `Function#apply` can be slow so we use the method's arg count, if we know it.\n  var addMethod = function(length, method, attribute) {\n    switch (length) {\n      case 1: return function() {\n        return _[method](this[attribute]);\n      };\n      case 2: return function(value) {\n        return _[method](this[attribute], value);\n      };\n      case 3: return function(iteratee, context) {\n        return _[method](this[attribute], cb(iteratee, this), context);\n      };\n      case 4: return function(iteratee, defaultVal, context) {\n        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);\n      };\n      default: return function() {\n        var args = slice.call(arguments);\n        args.unshift(this[attribute]);\n        return _[method].apply(_, args);\n      };\n    }\n  };\n  var addUnderscoreMethods = function(Class, methods, attribute) {\n    _.each(methods, function(length, method) {\n      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);\n    });\n  };\n\n  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\n  var cb = function(iteratee, instance) {\n    if (_.isFunction(iteratee)) return iteratee;\n    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\n    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };\n    return iteratee;\n  };\n  var modelMatcher = function(attrs) {\n    var matcher = _.matches(attrs);\n    return function(model) {\n      return matcher(model.attributes);\n    };\n  };\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // a custom event channel. You may bind a callback to an event with `on` or\n  // remove with `off`; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {};\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Iterates over the standard `event, callback` (as well as the fancy multiple\n  // space-separated events `\"change blur\", callback` and jQuery-style event\n  // maps `{event: callback}`).\n  var eventsApi = function(iteratee, events, name, callback, opts) {\n    var i = 0, names;\n    if (name && typeof name === 'object') {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n      for (names = _.keys(name); i < names.length ; i++) {\n        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n      }\n    } else if (name && eventSplitter.test(name)) {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++) {\n        events = iteratee(events, names[i], callback, opts);\n      }\n    } else {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n    }\n    return events;\n  };\n\n  // Bind an event to a `callback` function. Passing `\"all\"` will bind\n  // the callback to all events fired.\n  Events.on = function(name, callback, context) {\n    return internalOn(this, name, callback, context);\n  };\n\n  // Guard the `listening` argument from the public API.\n  var internalOn = function(obj, name, callback, context, listening) {\n    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {\n      context: context,\n      ctx: obj,\n      listening: listening\n    });\n\n    if (listening) {\n      var listeners = obj._listeners || (obj._listeners = {});\n      listeners[listening.id] = listening;\n    }\n\n    return obj;\n  };\n\n  // Inversion-of-control versions of `on`. Tell *this* object to listen to\n  // an event in another object... keeping track of what it's listening to\n  // for easier unbinding later.\n  Events.listenTo = function(obj, name, callback) {\n    if (!obj) return this;\n    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n    var listeningTo = this._listeningTo || (this._listeningTo = {});\n    var listening = listeningTo[id];\n\n    // This object is not listening to any other events on `obj` yet.\n    // Setup the necessary references to track the listening callbacks.\n    if (!listening) {\n      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));\n      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};\n    }\n\n    // Bind callbacks on obj, and keep track of them on listening.\n    internalOn(obj, name, callback, this, listening);\n    return this;\n  };\n\n  // The reducing API that adds a callback to the `events` object.\n  var onApi = function(events, name, callback, options) {\n    if (callback) {\n      var handlers = events[name] || (events[name] = []);\n      var context = options.context, ctx = options.ctx, listening = options.listening;\n      if (listening) listening.count++;\n\n      handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});\n    }\n    return events;\n  };\n\n  // Remove one or many callbacks. If `context` is null, removes all\n  // callbacks with that function. If `callback` is null, removes all\n  // callbacks for the event. If `name` is null, removes all bound\n  // callbacks for all events.\n  Events.off = function(name, callback, context) {\n    if (!this._events) return this;\n    this._events = eventsApi(offApi, this._events, name, callback, {\n      context: context,\n      listeners: this._listeners\n    });\n    return this;\n  };\n\n  // Tell this object to stop listening to either specific events ... or\n  // to every object it's currently listening to.\n  Events.stopListening = function(obj, name, callback) {\n    var listeningTo = this._listeningTo;\n    if (!listeningTo) return this;\n\n    var ids = obj ? [obj._listenId] : _.keys(listeningTo);\n\n    for (var i = 0; i < ids.length; i++) {\n      var listening = listeningTo[ids[i]];\n\n      // If listening doesn't exist, this object is not currently\n      // listening to obj. Break out early.\n      if (!listening) break;\n\n      listening.obj.off(name, callback, this);\n    }\n\n    return this;\n  };\n\n  // The reducing API that removes a callback from the `events` object.\n  var offApi = function(events, name, callback, options) {\n    if (!events) return;\n\n    var i = 0, listening;\n    var context = options.context, listeners = options.listeners;\n\n    // Delete all events listeners and \"drop\" events.\n    if (!name && !callback && !context) {\n      var ids = _.keys(listeners);\n      for (; i < ids.length; i++) {\n        listening = listeners[ids[i]];\n        delete listeners[listening.id];\n        delete listening.listeningTo[listening.objId];\n      }\n      return;\n    }\n\n    var names = name ? [name] : _.keys(events);\n    for (; i < names.length; i++) {\n      name = names[i];\n      var handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) break;\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      var remaining = [];\n      for (var j = 0; j < handlers.length; j++) {\n        var handler = handlers[j];\n        if (\n          callback && callback !== handler.callback &&\n            callback !== handler.callback._callback ||\n              context && context !== handler.context\n        ) {\n          remaining.push(handler);\n        } else {\n          listening = handler.listening;\n          if (listening && --listening.count === 0) {\n            delete listeners[listening.id];\n            delete listening.listeningTo[listening.objId];\n          }\n        }\n      }\n\n      // Update tail event if the list has any events.  Otherwise, clean up.\n      if (remaining.length) {\n        events[name] = remaining;\n      } else {\n        delete events[name];\n      }\n    }\n    return events;\n  };\n\n  // Bind an event to only be triggered a single time. After the first time\n  // the callback is invoked, its listener will be removed. If multiple events\n  // are passed in using the space-separated syntax, the handler will fire\n  // once for each event, not once for a combination of all events.\n  Events.once = function(name, callback, context) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\n    if (typeof name === 'string' && context == null) callback = void 0;\n    return this.on(events, callback, context);\n  };\n\n  // Inversion-of-control versions of `once`.\n  Events.listenToOnce = function(obj, name, callback) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\n    return this.listenTo(obj, events);\n  };\n\n  // Reduces the event callbacks into a map of `{event: onceWrapper}`.\n  // `offer` unbinds the `onceWrapper` after it has been called.\n  var onceMap = function(map, name, callback, offer) {\n    if (callback) {\n      var once = map[name] = _.once(function() {\n        offer(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n    }\n    return map;\n  };\n\n  // Trigger one or many events, firing all bound callbacks. Callbacks are\n  // passed the same arguments as `trigger` is, apart from the event name\n  // (unless you're listening on `\"all\"`, which will cause your callback to\n  // receive the true name of the event as the first argument).\n  Events.trigger = function(name) {\n    if (!this._events) return this;\n\n    var length = Math.max(0, arguments.length - 1);\n    var args = Array(length);\n    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\n\n    eventsApi(triggerApi, this._events, name, void 0, args);\n    return this;\n  };\n\n  // Handles triggering the appropriate event callbacks.\n  var triggerApi = function(objEvents, name, callback, args) {\n    if (objEvents) {\n      var events = objEvents[name];\n      var allEvents = objEvents.all;\n      if (events && allEvents) allEvents = allEvents.slice();\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, [name].concat(args));\n    }\n    return objEvents;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n    }\n  };\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    var defaults = _.result(this, 'defaults');\n    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // The prefix is used to create the client id which is used to identify models locally.\n    // You may want to override this if you're experiencing name clashes with model ids.\n    cidPrefix: 'c',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Special-cased proxy to underscore's `_.matches` method.\n    matches: function(attrs) {\n      return !!_.iteratee(attrs, this)(this.attributes);\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      var unset      = options.unset;\n      var silent     = options.silent;\n      var changes    = [];\n      var changing   = this._changing;\n      this._changing = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n\n      var current = this.attributes;\n      var changed = this.changed;\n      var prev    = this._previousAttributes;\n\n      // For each `set` attribute, update or delete the current value.\n      for (var attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          changed[attr] = val;\n        } else {\n          delete changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Update the `id`.\n      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = options;\n        for (var i = 0; i < changes.length; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      var changed = {};\n      for (var attr in diff) {\n        var val = diff[attr];\n        if (_.isEqual(old[attr], val)) continue;\n        changed[attr] = val;\n      }\n      return _.size(changed) ? changed : false;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server, merging the response with the model's\n    // local attributes. Any changed attributes will trigger a \"change\" event.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (!model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true, parse: true}, options);\n      var wait = options.wait;\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !wait) {\n        if (!this.set(attrs, options)) return false;\n      } else if (!this._validate(attrs, options)) {\n        return false;\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      var model = this;\n      var success = options.success;\n      var attributes = this.attributes;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n        if (serverAttrs && !model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\n      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\n      var xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n      var wait = options.wait;\n\n      var destroy = function() {\n        model.stopListening();\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (wait) destroy();\n        if (success) success.call(options.context, model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      var xhr = false;\n      if (this.isNew()) {\n        _.defer(options.success);\n      } else {\n        wrapError(this, options);\n        xhr = this.sync('delete', this, options);\n      }\n      if (!wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base =\n        _.result(this, 'urlRoot') ||\n        _.result(this.collection, 'url') ||\n        urlError();\n      if (this.isNew()) return base;\n      var id = this.get(this.idAttribute);\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return !this.has(this.idAttribute);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend({}, options, {validate: true}));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model, mapped to the\n  // number of arguments they take.\n  var modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,\n      omit: 0, chain: 1, isEmpty: 1};\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  addUnderscoreMethods(Model, modelMethods, 'attributes');\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analogous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Splices `insert` into `array` at index `at`.\n  var splice = function(array, insert, at) {\n    at = Math.min(Math.max(at, 0), array.length);\n    var tail = Array(array.length - at);\n    var length = insert.length;\n    var i;\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n  };\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model) { return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set. `models` may be Backbone\n    // Models or raw JavaScript objects to be converted to Models, or any\n    // combination of the two.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      options = _.extend({}, options);\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n      var removed = this._removeModels(models, options);\n      if (!options.silent && removed.length) {\n        options.changes = {added: [], merged: [], removed: removed};\n        this.trigger('update', this, options);\n      }\n      return singular ? removed[0] : removed;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      if (models == null) return;\n\n      options = _.extend({}, setOptions, options);\n      if (options.parse && !this._isModel(models)) {\n        models = this.parse(models, options) || [];\n      }\n\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n\n      var at = options.at;\n      if (at != null) at = +at;\n      if (at > this.length) at = this.length;\n      if (at < 0) at += this.length + 1;\n\n      var set = [];\n      var toAdd = [];\n      var toMerge = [];\n      var toRemove = [];\n      var modelMap = {};\n\n      var add = options.add;\n      var merge = options.merge;\n      var remove = options.remove;\n\n      var sort = false;\n      var sortable = this.comparator && at == null && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      var model, i;\n      for (i = 0; i < models.length; i++) {\n        model = models[i];\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        var existing = this.get(model);\n        if (existing) {\n          if (merge && model !== existing) {\n            var attrs = this._isModel(model) ? model.attributes : model;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            toMerge.push(existing);\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n          }\n          if (!modelMap[existing.cid]) {\n            modelMap[existing.cid] = true;\n            set.push(existing);\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(model, options);\n          if (model) {\n            toAdd.push(model);\n            this._addReference(model, options);\n            modelMap[model.cid] = true;\n            set.push(model);\n          }\n        }\n      }\n\n      // Remove stale models.\n      if (remove) {\n        for (i = 0; i < this.length; i++) {\n          model = this.models[i];\n          if (!modelMap[model.cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this._removeModels(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      var orderChanged = false;\n      var replace = !sortable && add && remove;\n      if (set.length && replace) {\n        orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {\n          return m !== set[index];\n        });\n        this.models.length = 0;\n        splice(this.models, set, 0);\n        this.length = this.models.length;\n      } else if (toAdd.length) {\n        if (sortable) sort = true;\n        splice(this.models, toAdd, at == null ? this.length : at);\n        this.length = this.models.length;\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\n      if (!options.silent) {\n        for (i = 0; i < toAdd.length; i++) {\n          if (at != null) options.index = at + i;\n          model = toAdd[i];\n          model.trigger('add', model, this, options);\n        }\n        if (sort || orderChanged) this.trigger('sort', this, options);\n        if (toAdd.length || toRemove.length || toMerge.length) {\n          options.changes = {\n            added: toAdd,\n            removed: toRemove,\n            merged: toMerge\n          };\n          this.trigger('update', this, options);\n        }\n      }\n\n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options = options ? _.clone(options) : {};\n      for (var i = 0; i < this.models.length; i++) {\n        this._removeReference(this.models[i], options);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      return this.remove(model, options);\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      return this.remove(model, options);\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id, cid, model object with id or cid\n    // properties, or an attributes object that is transformed through modelId.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj] ||\n        this._byId[this.modelId(obj.attributes || obj)] ||\n        obj.cid && this._byId[obj.cid];\n    },\n\n    // Returns `true` if the model is in the collection.\n    has: function(obj) {\n      return this.get(obj) != null;\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      if (index < 0) index += this.length;\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      return this[first ? 'find' : 'filter'](attrs);\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      var comparator = this.comparator;\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      var length = comparator.length;\n      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);\n\n      // Run sort based on type of `comparator`.\n      if (length === 1 || _.isString(comparator)) {\n        this.models = this.sortBy(comparator);\n      } else {\n        this.models.sort(comparator);\n      }\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return this.map(attr + '');\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success.call(options.context, collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      var wait = options.wait;\n      model = this._prepareModel(model, options);\n      if (!model) return false;\n      if (!wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(m, resp, callbackOpts) {\n        if (wait) collection.add(m, callbackOpts);\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models, {\n        model: this.model,\n        comparator: this.comparator\n      });\n    },\n\n    // Define how to uniquely identify models in the collection.\n    modelId: function(attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (this._isModel(attrs)) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method called by both remove and set.\n    _removeModels: function(models, options) {\n      var removed = [];\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n\n        // Remove references before triggering 'remove' event to prevent an\n        // infinite loop. #3693\n        delete this._byId[model.cid];\n        var id = this.modelId(model.attributes);\n        if (id != null) delete this._byId[id];\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed;\n    },\n\n    // Method for checking whether an object should be considered a model for\n    // the purposes of adding to the collection.\n    _isModel: function(model) {\n      return model instanceof Model;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n      this._byId[model.cid] = model;\n      var id = this.modelId(model.attributes);\n      if (id != null) this._byId[id] = model;\n      model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes);\n      if (id != null) delete this._byId[id];\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if (model) {\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\n        if (event === 'destroy') this.remove(model, options);\n        if (event === 'change') {\n          var prevId = this.modelId(model.previousAttributes());\n          var id = this.modelId(model.attributes);\n          if (prevId !== id) {\n            if (prevId != null) delete this._byId[prevId];\n            if (id != null) this._byId[id] = model;\n          }\n        }\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,\n      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,\n      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,\n      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\n      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\n      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\n      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,\n      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  addUnderscoreMethods(Collection, collectionMethods, 'models');\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be set as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this._removeElement();\n      this.stopListening();\n      return this;\n    },\n\n    // Remove this view's element from the document and all event listeners\n    // attached to it. Exposed for subclasses using an alternative DOM\n    // manipulation API.\n    _removeElement: function() {\n      this.$el.remove();\n    },\n\n    // Change the view's element (`this.el` property) and re-delegate the\n    // view's events on the new element.\n    setElement: function(element) {\n      this.undelegateEvents();\n      this._setElement(element);\n      this.delegateEvents();\n      return this;\n    },\n\n    // Creates the `this.el` and `this.$el` references for this view using the\n    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n    // context or an element. Subclasses can override this to utilize an\n    // alternative DOM manipulation API and are only required to set the\n    // `this.el` property.\n    _setElement: function(el) {\n      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n      this.el = this.$el[0];\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    delegateEvents: function(events) {\n      events || (events = _.result(this, 'events'));\n      if (!events) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[method];\n        if (!method) continue;\n        var match = key.match(delegateEventSplitter);\n        this.delegate(match[1], match[2], _.bind(method, this));\n      }\n      return this;\n    },\n\n    // Add a single event listener to the view's element (or a child element\n    // using `selector`). This only works for delegate-able events: not `focus`,\n    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n    delegate: function(eventName, selector, listener) {\n      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view by `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // A finer-grained `undelegateEvents` for removing a single delegated event.\n    // `selector` and `listener` are both optional.\n    undelegate: function(eventName, selector, listener) {\n      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Produces a DOM element to be assigned to your view. Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _createElement: function(tagName) {\n      return document.createElement(tagName);\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        this.setElement(this._createElement(_.result(this, 'tagName')));\n        this._setAttributes(attrs);\n      } else {\n        this.setElement(_.result(this, 'el'));\n      }\n    },\n\n    // Set attributes from a hash on this view's element.  Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _setAttributes: function(attributes) {\n      this.$el.attr(attributes);\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // Pass along `textStatus` and `errorThrown` from jQuery.\n    var error = options.error;\n    options.error = function(xhr, textStatus, errorThrown) {\n      options.textStatus = textStatus;\n      options.errorThrown = errorThrown;\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\n    };\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch': 'PATCH',\n    'delete': 'DELETE',\n    'read': 'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        if (router.execute(callback, args, name) !== false) {\n          router.trigger.apply(router, ['route:' + name].concat(args));\n          router.trigger('route', name, args);\n          Backbone.history.trigger('route', router, name, args);\n        }\n      });\n      return this;\n    },\n\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function(callback, args, name) {\n      if (callback) callback.apply(this, args);\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^/?]+)';\n                   })\n                   .replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    this.checkUrl = _.bind(this.checkUrl, this);\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for stripping urls of hash.\n  var pathStripper = /#.*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Are we at the app root?\n    atRoot: function() {\n      var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\n      return path === this.root && !this.getSearch();\n    },\n\n    // Does the pathname match the root?\n    matchRoot: function() {\n      var path = this.decodeFragment(this.location.pathname);\n      var rootPath = path.slice(0, this.root.length - 1) + '/';\n      return rootPath === this.root;\n    },\n\n    // Unicode characters in `location.pathname` are percent encoded so they're\n    // decoded for comparison. `%25` should not be decoded since it may be part\n    // of an encoded parameter.\n    decodeFragment: function(fragment) {\n      return decodeURI(fragment.replace(/%25/g, '%2525'));\n    },\n\n    // In IE6, the hash fragment and search params are incorrect if the\n    // fragment contains `?`.\n    getSearch: function() {\n      var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\n      return match ? match[0] : '';\n    },\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the pathname and search params, without the root.\n    getPath: function() {\n      var path = this.decodeFragment(\n        this.location.pathname + this.getSearch()\n      ).slice(this.root.length - 1);\n      return path.charAt(0) === '/' ? path.slice(1) : path;\n    },\n\n    // Get the cross-browser normalized URL fragment from the path or hash.\n    getFragment: function(fragment) {\n      if (fragment == null) {\n        if (this._usePushState || !this._wantsHashChange) {\n          fragment = this.getPath();\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error('Backbone.history has already been started');\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);\n      this._useHashChange   = this._wantsHashChange && this._hasHashChange;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.history && this.history.pushState);\n      this._usePushState    = this._wantsPushState && this._hasPushState;\n      this.fragment         = this.getFragment();\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          var rootPath = this.root.slice(0, -1) || '/';\n          this.location.replace(rootPath + '#' + this.getPath());\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot()) {\n          this.navigate(this.getHash(), {replace: true});\n        }\n\n      }\n\n      // Proxy an iframe to handle location events if the browser doesn't\n      // support the `hashchange` event, HTML5 history, or the user wants\n      // `hashChange` but not `pushState`.\n      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n        this.iframe = document.createElement('iframe');\n        this.iframe.src = 'javascript:0';\n        this.iframe.style.display = 'none';\n        this.iframe.tabIndex = -1;\n        var body = document.body;\n        // Using `appendChild` will throw on IE < 9 if the document is not ready.\n        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n        iWindow.document.open();\n        iWindow.document.close();\n        iWindow.location.hash = '#' + this.fragment;\n      }\n\n      // Add a cross-platform `addEventListener` shim for older browsers.\n      var addEventListener = window.addEventListener || function(eventName, listener) {\n        return attachEvent('on' + eventName, listener);\n      };\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._usePushState) {\n        addEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        addEventListener('hashchange', this.checkUrl, false);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      // Add a cross-platform `removeEventListener` shim for older browsers.\n      var removeEventListener = window.removeEventListener || function(eventName, listener) {\n        return detachEvent('on' + eventName, listener);\n      };\n\n      // Remove window listeners.\n      if (this._usePushState) {\n        removeEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        removeEventListener('hashchange', this.checkUrl, false);\n      }\n\n      // Clean up the iframe if necessary.\n      if (this.iframe) {\n        document.body.removeChild(this.iframe);\n        this.iframe = null;\n      }\n\n      // Some environments will throw when clearing an undefined interval.\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n\n      // If the user pressed the back button, the iframe's hash will have\n      // changed and we should use that for comparison.\n      if (current === this.fragment && this.iframe) {\n        current = this.getHash(this.iframe.contentWindow);\n      }\n\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      // If the root doesn't match, no routes can match either.\n      if (!this.matchRoot()) return false;\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.some(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      // Normalize the fragment.\n      fragment = this.getFragment(fragment || '');\n\n      // Don't include a trailing slash on the root.\n      var rootPath = this.root;\n      if (fragment === '' || fragment.charAt(0) === '?') {\n        rootPath = rootPath.slice(0, -1) || '/';\n      }\n      var url = rootPath + fragment;\n\n      // Strip the hash and decode for matching.\n      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._usePushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {\n          var iWindow = this.iframe.contentWindow;\n\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if (!options.replace) {\n            iWindow.document.open();\n            iWindow.document.close();\n          }\n\n          this._updateHash(iWindow.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function and add the prototype properties.\n    child.prototype = _.create(parent.prototype, protoProps);\n    child.prototype.constructor = child;\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error.call(options.context, model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n});\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(143)))\n\n/***/ }),\n\n/***/ 143:\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n\n/***/ 157:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<div class=\\\"form-inline\\\">\\n    <input placeholder=\\\"Enter group title...\\\" type=\\\"text\\\" class=\\\"form-control\\\" />\\n    <button class=\\\"btn btn-success btn-add-group\\\"><span class=\\\"glyphicon glyphicon-ok\\\"></span></button>\\n</div>\\n\";\n\n/***/ }),\n\n/***/ 158:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<li data-field-id=\\\"<%- id %>\\\" class=\\\"list-group-item\\\">\\n    <span class=\\\"field-label\\\"><%- label %></span>\\n    <span class=\\\"text-muted glyphicon glyphicon-align-justify pull-right\\\"></span>\\n</li>\\n\";\n\n/***/ }),\n\n/***/ 159:\n/***/ (function(module, exports) {\n\nmodule.exports = \"<li class=\\\"list-group-item list-group-item-title\\\">\\n    <span class=\\\"badge\\\">\\n        <%- fields.length %>\\n        <%- (1 === fields.length ? 'Field' : 'Fields') %>\\n    </span>\\n    <h4>\\n        <%- title %>\\n    </h4>\\n    <% if (caption) { %>\\n    <div class=\\\"help-block\\\"><%- caption %></div>\\n    <% } %>\\n    <% if (allowEditing) { %>\\n    <div class=\\\"title-input form-inline\\\">\\n        <input type=\\\"text\\\" class=\\\"title-input form-control\\\" value=\\\"<%- title %>\\\" />\\n        <button type=\\\"button\\\" class=\\\"btn btn-save-title btn-success btn-sm\\\"><span class=\\\"glyphicon glyphicon-ok\\\"></span></button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-cancel btn-link btn-sm\\\">Cancel</button>\\n    </div>\\n    <div class=\\\"title-buttons\\\">\\n        <a href=\\\"#\\\" class=\\\"btn-remove pull-right btn btn-sm btn-default\\\">\\n            <span class=\\\"glyphicon glyphicon-remove\\\"></span>\\n            Delete Group\\n        </a>\\n        <a href=\\\"#\\\" class=\\\"btn-edit pull-right btn btn-sm btn-success\\\">\\n            <span class=\\\"glyphicon glyphicon-pencil\\\"></span>\\n            Edit Title\\n        </a>\\n    </div>\\n    <% } %>\\n</li>\\n\";\n\n/***/ }),\n\n/***/ 172:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__add_group_popover_template_html__ = __webpack_require__(157);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__add_group_popover_template_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__add_group_popover_template_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(117);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone__ = __webpack_require__(138);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone__);\n\n\n\n\nvar AddGroupPopoverView = __WEBPACK_IMPORTED_MODULE_2_backbone___default.a.View.extend({\n    el: '#add-group-wrapper',\n\n    events: {\n        'click #add-group': 'preventSubmission',\n        'show.bs.popover #add-group': 'focusInput',\n        'keydown .popover-content input:first': 'addGroupOnEnter',\n        'click .popover-content .btn': 'addGroup'\n    },\n\n    groups: null,\n\n    initialize: function initialize(attributes, options) {\n        this.$el.find('#add-group').popover({\n            html: true,\n            placement: 'top',\n            content: __WEBPACK_IMPORTED_MODULE_0__add_group_popover_template_html___default.a\n        });\n    },\n\n    setGroups: function setGroups(groups) {\n        this.groups = groups;\n\n        return this;\n    },\n\n    preventSubmission: function preventSubmission(e) {\n        e.preventDefault();\n    },\n\n    focusInput: function focusInput(e) {\n        setTimeout(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.bind(function () {\n            this.$el.find('.popover-content input').focus();\n        }, this), 1);\n    },\n\n    addGroupOnEnter: function addGroupOnEnter(e) {\n        if (13 === e.keyCode) {\n            return this.addGroup(e);\n        }\n    },\n\n    addGroup: function addGroup(e) {\n        e.preventDefault();\n\n        $('#add-group').popover('hide');\n\n        this.collection.add({\n            title: this.$el.find('.popover-content input').val()\n        });\n    }\n});\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AddGroupPopoverView);\n\n/***/ }),\n\n/***/ 173:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore__ = __webpack_require__(117);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_underscore__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone__ = __webpack_require__(138);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_backbone__);\n\n\n\nvar Model = __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Model.extend({\n    defaults: {\n        allowEditing: true,\n        animate: true,\n        title: '',\n        caption: '',\n        sortIndex: null,\n        fields: []\n    }\n});\n\nvar GroupsCollection = __WEBPACK_IMPORTED_MODULE_1_backbone___default.a.Collection.extend({\n    model: Model,\n\n    comparator: 'sortIndex',\n\n    toJSON: function toJSON() {\n        return this.map(function (model) {\n            return __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.pick(model.toJSON(this), ['title', 'fields']);\n        });\n    },\n\n    initializeWithGlobalVariable: function initializeWithGlobalVariable() {\n        if ('undefined' === typeof window.initialFieldGroupsConfig) {\n            throw 'Could not find initialFieldGroupsConfig variable in global scope';\n        }\n\n        __WEBPACK_IMPORTED_MODULE_0_underscore___default.a.each(window.initialFieldGroupsConfig, function (group, index) {\n            group.allowEditing = true;\n            group.animate = false;\n            group.sortIndex = index;\n\n            if (0 === index) {\n                group.allowEditing = false;\n            }\n\n            this.add(group);\n        }, this);\n    }\n});\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GroupsCollection);\n\n/***/ }),\n\n/***/ 174:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__list_view__ = __webpack_require__(175);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore__ = __webpack_require__(117);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_underscore__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone__ = __webpack_require__(138);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_backbone__);\n\n\n\n\nvar GroupsView = __WEBPACK_IMPORTED_MODULE_2_backbone___default.a.View.extend({\n    el: '#groups-wrapper',\n\n    events: {\n        'sortstop': 'updateSortIndexes'\n    },\n\n    initialize: function initialize() {\n        this.collection.on('add remove', this.render, this);\n    },\n\n    render: function render() {\n        var hideTitle = 1 === this.collection.length;\n\n        this.$el.empty();\n\n        this.collection.each(function (group, index) {\n            var view = new __WEBPACK_IMPORTED_MODULE_0__list_view__[\"a\" /* default */]({\n                model: group,\n                hideTitle: hideTitle,\n                ungroupedModel: this.collection.first()\n            });\n\n            this.$el.append(view.render().el);\n        }, this);\n\n        this.$el.sortable({\n            items: 'ul:not(.list-group:first)'\n        }).disableSelection();\n\n        return this;\n    },\n\n    updateSortIndexes: function updateSortIndexes() {\n        this.$el.find('.list-group').each(__WEBPACK_IMPORTED_MODULE_1_underscore___default.a.bind(function (index, list) {\n            this.collection.get($(list).data('model-id')).set('sortIndex', index);\n            this.collection.sort();\n        }, this));\n    }\n});\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GroupsView);\n\n/***/ }),\n\n/***/ 175:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__list_template_html__ = __webpack_require__(159);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__list_template_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__list_template_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__list_field_template_html__ = __webpack_require__(158);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__list_field_template_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__list_field_template_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore__ = __webpack_require__(117);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_underscore___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_underscore__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone__ = __webpack_require__(138);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_backbone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_backbone__);\n\n\n\n\n\nvar listTemplate = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.template(__WEBPACK_IMPORTED_MODULE_0__list_template_html___default.a),\n    fieldTemplate = __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.template(__WEBPACK_IMPORTED_MODULE_1__list_field_template_html___default.a);\n\nvar ListView = __WEBPACK_IMPORTED_MODULE_3_backbone___default.a.View.extend({\n    template: listTemplate,\n\n    tagName: 'ul',\n\n    className: 'list-group',\n\n    hideTitle: false,\n\n    events: {\n        'sortstop': 'updateModelFields',\n        'sortremove': 'updateModelFields',\n        'sortreceive': 'updateModelFields',\n        'click .btn-remove': 'delete',\n        'click .btn-edit': 'showTitleInput',\n        'click .btn-save-title': 'saveTitle',\n        'click .btn-cancel': 'cancelTitleInput',\n        'keydown .title-input': 'saveTitleOnEnter'\n    },\n\n    initialize: function initialize(attributes, options) {\n        this.model.on('change:title', this.render, this);\n        this.model.on('change:fields', this.updateBadge, this);\n\n        this.hideTitle = attributes.hideTitle;\n        this.ungroupedModel = attributes.ungroupedModel;\n    },\n\n    render: function render() {\n        var list;\n\n        this.$el.html(this.template(this.model.toJSON()));\n        this.$el.find('.title-input').hide();\n\n        if (this.model.get('animate') && !this.model.get('fields').length) {\n            this.$el.velocity('transition.flipYIn');\n        }\n\n        // We don't want to show the title at all when there is only 1 group\n        if (this.hideTitle) {\n            this.$el.find('.list-group-item-title').remove();\n        }\n\n        this.$el.data('model-id', this.model.cid);\n\n        this.$el.sortable({\n            items: 'li:not(.list-group-item-title)',\n            connectWith: '.list-group'\n        }).disableSelection();\n\n        __WEBPACK_IMPORTED_MODULE_2_underscore___default.a.each(this.model.get('fields'), function (field, index) {\n            this.$el.append(fieldTemplate(field));\n        }, this);\n\n        return this;\n    },\n\n    delete: function _delete(e) {\n        e.preventDefault();\n\n        // Pass remaining fields over to the \"ungrouped\" set\n        this.ungroupedModel.set('fields', this.ungroupedModel.get('fields').concat(this.model.get('fields')));\n\n        this.model.destroy();\n    },\n\n    showTitleInput: function showTitleInput(e) {\n        e.preventDefault();\n\n        this.$el.find('h4').hide();\n        this.$el.find('.title-input').show();\n        this.$el.find('.title-input').focus();\n    },\n\n    saveTitleOnEnter: function saveTitleOnEnter(e) {\n        if (13 === e.keyCode) {\n            this.saveTitle(e);\n        }\n    },\n\n    saveTitle: function saveTitle(e) {\n        e.preventDefault();\n\n        this.model.set('title', this.$el.find('.title-input input').val());\n\n        this.cancelTitleInput(e);\n    },\n\n    cancelTitleInput: function cancelTitleInput(e) {\n        e.preventDefault();\n\n        this.$el.find('.title-input').hide();\n        this.$el.find('h4').show();\n    },\n\n    updateBadge: function updateBadge() {\n        var count = this.model.get('fields').length,\n            suffix = 1 === count ? '' : 's';\n\n        this.$el.find('.badge').text(count + ' Field' + suffix);\n    },\n\n    updateModelFields: function updateModelFields(e, ui) {\n        var fields = [];\n\n        this.$el.find('li:not(.list-group-item-title)').each(function (index, element) {\n            fields.push({\n                id: $(element).data('field-id'),\n                label: $(element).find('.field-label').text()\n            });\n        });\n\n        this.model.set('fields', fields);\n    }\n});\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ListView);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 1.js","import GroupsCollection from './sort-fields/groups-collection';\nimport GroupsView from './sort-fields/groups-view';\nimport Popover from './sort-fields/add-group-popover-view';\n\nclass SortFields {\n    constructor() {\n        var collection = new GroupsCollection(),\n            popover    = new Popover({collection: collection}),\n            groups     = new GroupsView({collection: collection});\n\n        collection.initializeWithGlobalVariable();\n\n        $('#sort-form').on(\n            'submit',\n            function (e) {\n                $('#sorted-fields').val(JSON.stringify(collection.toJSON()));\n            }\n        );\n    }\n}\n\nexport default SortFields;\n\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/sort-fields.js","//     Backbone.js 1.3.3\n\n//     (c) 2010-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(factory) {\n\n  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\n  // We use `self` instead of `window` for `WebWorker` support.\n  var root = (typeof self == 'object' && self.self === self && self) ||\n            (typeof global == 'object' && global.global === global && global);\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (typeof define === 'function' && define.amd) {\n    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    });\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore'), $;\n    try { $ = require('jquery'); } catch (e) {}\n    factory(root, exports, _, $);\n\n  // Finally, as a browser global.\n  } else {\n    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n})(function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create a local reference to a common array method we'll want to use later.\n  var slice = Array.prototype.slice;\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.3.3';\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... this will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Proxy Backbone class methods to Underscore functions, wrapping the model's\n  // `attributes` object or collection's `models` array behind the scenes.\n  //\n  // collection.filter(function(model) { return model.get('age') > 10 });\n  // collection.each(this.addView);\n  //\n  // `Function#apply` can be slow so we use the method's arg count, if we know it.\n  var addMethod = function(length, method, attribute) {\n    switch (length) {\n      case 1: return function() {\n        return _[method](this[attribute]);\n      };\n      case 2: return function(value) {\n        return _[method](this[attribute], value);\n      };\n      case 3: return function(iteratee, context) {\n        return _[method](this[attribute], cb(iteratee, this), context);\n      };\n      case 4: return function(iteratee, defaultVal, context) {\n        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);\n      };\n      default: return function() {\n        var args = slice.call(arguments);\n        args.unshift(this[attribute]);\n        return _[method].apply(_, args);\n      };\n    }\n  };\n  var addUnderscoreMethods = function(Class, methods, attribute) {\n    _.each(methods, function(length, method) {\n      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);\n    });\n  };\n\n  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\n  var cb = function(iteratee, instance) {\n    if (_.isFunction(iteratee)) return iteratee;\n    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\n    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };\n    return iteratee;\n  };\n  var modelMatcher = function(attrs) {\n    var matcher = _.matches(attrs);\n    return function(model) {\n      return matcher(model.attributes);\n    };\n  };\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // a custom event channel. You may bind a callback to an event with `on` or\n  // remove with `off`; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {};\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Iterates over the standard `event, callback` (as well as the fancy multiple\n  // space-separated events `\"change blur\", callback` and jQuery-style event\n  // maps `{event: callback}`).\n  var eventsApi = function(iteratee, events, name, callback, opts) {\n    var i = 0, names;\n    if (name && typeof name === 'object') {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n      for (names = _.keys(name); i < names.length ; i++) {\n        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n      }\n    } else if (name && eventSplitter.test(name)) {\n      // Handle space-separated event names by delegating them individually.\n      for (names = name.split(eventSplitter); i < names.length; i++) {\n        events = iteratee(events, names[i], callback, opts);\n      }\n    } else {\n      // Finally, standard events.\n      events = iteratee(events, name, callback, opts);\n    }\n    return events;\n  };\n\n  // Bind an event to a `callback` function. Passing `\"all\"` will bind\n  // the callback to all events fired.\n  Events.on = function(name, callback, context) {\n    return internalOn(this, name, callback, context);\n  };\n\n  // Guard the `listening` argument from the public API.\n  var internalOn = function(obj, name, callback, context, listening) {\n    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {\n      context: context,\n      ctx: obj,\n      listening: listening\n    });\n\n    if (listening) {\n      var listeners = obj._listeners || (obj._listeners = {});\n      listeners[listening.id] = listening;\n    }\n\n    return obj;\n  };\n\n  // Inversion-of-control versions of `on`. Tell *this* object to listen to\n  // an event in another object... keeping track of what it's listening to\n  // for easier unbinding later.\n  Events.listenTo = function(obj, name, callback) {\n    if (!obj) return this;\n    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n    var listeningTo = this._listeningTo || (this._listeningTo = {});\n    var listening = listeningTo[id];\n\n    // This object is not listening to any other events on `obj` yet.\n    // Setup the necessary references to track the listening callbacks.\n    if (!listening) {\n      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));\n      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};\n    }\n\n    // Bind callbacks on obj, and keep track of them on listening.\n    internalOn(obj, name, callback, this, listening);\n    return this;\n  };\n\n  // The reducing API that adds a callback to the `events` object.\n  var onApi = function(events, name, callback, options) {\n    if (callback) {\n      var handlers = events[name] || (events[name] = []);\n      var context = options.context, ctx = options.ctx, listening = options.listening;\n      if (listening) listening.count++;\n\n      handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});\n    }\n    return events;\n  };\n\n  // Remove one or many callbacks. If `context` is null, removes all\n  // callbacks with that function. If `callback` is null, removes all\n  // callbacks for the event. If `name` is null, removes all bound\n  // callbacks for all events.\n  Events.off = function(name, callback, context) {\n    if (!this._events) return this;\n    this._events = eventsApi(offApi, this._events, name, callback, {\n      context: context,\n      listeners: this._listeners\n    });\n    return this;\n  };\n\n  // Tell this object to stop listening to either specific events ... or\n  // to every object it's currently listening to.\n  Events.stopListening = function(obj, name, callback) {\n    var listeningTo = this._listeningTo;\n    if (!listeningTo) return this;\n\n    var ids = obj ? [obj._listenId] : _.keys(listeningTo);\n\n    for (var i = 0; i < ids.length; i++) {\n      var listening = listeningTo[ids[i]];\n\n      // If listening doesn't exist, this object is not currently\n      // listening to obj. Break out early.\n      if (!listening) break;\n\n      listening.obj.off(name, callback, this);\n    }\n\n    return this;\n  };\n\n  // The reducing API that removes a callback from the `events` object.\n  var offApi = function(events, name, callback, options) {\n    if (!events) return;\n\n    var i = 0, listening;\n    var context = options.context, listeners = options.listeners;\n\n    // Delete all events listeners and \"drop\" events.\n    if (!name && !callback && !context) {\n      var ids = _.keys(listeners);\n      for (; i < ids.length; i++) {\n        listening = listeners[ids[i]];\n        delete listeners[listening.id];\n        delete listening.listeningTo[listening.objId];\n      }\n      return;\n    }\n\n    var names = name ? [name] : _.keys(events);\n    for (; i < names.length; i++) {\n      name = names[i];\n      var handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) break;\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      var remaining = [];\n      for (var j = 0; j < handlers.length; j++) {\n        var handler = handlers[j];\n        if (\n          callback && callback !== handler.callback &&\n            callback !== handler.callback._callback ||\n              context && context !== handler.context\n        ) {\n          remaining.push(handler);\n        } else {\n          listening = handler.listening;\n          if (listening && --listening.count === 0) {\n            delete listeners[listening.id];\n            delete listening.listeningTo[listening.objId];\n          }\n        }\n      }\n\n      // Update tail event if the list has any events.  Otherwise, clean up.\n      if (remaining.length) {\n        events[name] = remaining;\n      } else {\n        delete events[name];\n      }\n    }\n    return events;\n  };\n\n  // Bind an event to only be triggered a single time. After the first time\n  // the callback is invoked, its listener will be removed. If multiple events\n  // are passed in using the space-separated syntax, the handler will fire\n  // once for each event, not once for a combination of all events.\n  Events.once = function(name, callback, context) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\n    if (typeof name === 'string' && context == null) callback = void 0;\n    return this.on(events, callback, context);\n  };\n\n  // Inversion-of-control versions of `once`.\n  Events.listenToOnce = function(obj, name, callback) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\n    return this.listenTo(obj, events);\n  };\n\n  // Reduces the event callbacks into a map of `{event: onceWrapper}`.\n  // `offer` unbinds the `onceWrapper` after it has been called.\n  var onceMap = function(map, name, callback, offer) {\n    if (callback) {\n      var once = map[name] = _.once(function() {\n        offer(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n    }\n    return map;\n  };\n\n  // Trigger one or many events, firing all bound callbacks. Callbacks are\n  // passed the same arguments as `trigger` is, apart from the event name\n  // (unless you're listening on `\"all\"`, which will cause your callback to\n  // receive the true name of the event as the first argument).\n  Events.trigger = function(name) {\n    if (!this._events) return this;\n\n    var length = Math.max(0, arguments.length - 1);\n    var args = Array(length);\n    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\n\n    eventsApi(triggerApi, this._events, name, void 0, args);\n    return this;\n  };\n\n  // Handles triggering the appropriate event callbacks.\n  var triggerApi = function(objEvents, name, callback, args) {\n    if (objEvents) {\n      var events = objEvents[name];\n      var allEvents = objEvents.all;\n      if (events && allEvents) allEvents = allEvents.slice();\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, [name].concat(args));\n    }\n    return objEvents;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n    }\n  };\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    var defaults = _.result(this, 'defaults');\n    attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // The prefix is used to create the client id which is used to identify models locally.\n    // You may want to override this if you're experiencing name clashes with model ids.\n    cidPrefix: 'c',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Special-cased proxy to underscore's `_.matches` method.\n    matches: function(attrs) {\n      return !!_.iteratee(attrs, this)(this.attributes);\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      var unset      = options.unset;\n      var silent     = options.silent;\n      var changes    = [];\n      var changing   = this._changing;\n      this._changing = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n\n      var current = this.attributes;\n      var changed = this.changed;\n      var prev    = this._previousAttributes;\n\n      // For each `set` attribute, update or delete the current value.\n      for (var attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          changed[attr] = val;\n        } else {\n          delete changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Update the `id`.\n      if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = options;\n        for (var i = 0; i < changes.length; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      var changed = {};\n      for (var attr in diff) {\n        var val = diff[attr];\n        if (_.isEqual(old[attr], val)) continue;\n        changed[attr] = val;\n      }\n      return _.size(changed) ? changed : false;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server, merging the response with the model's\n    // local attributes. Any changed attributes will trigger a \"change\" event.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (!model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true, parse: true}, options);\n      var wait = options.wait;\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !wait) {\n        if (!this.set(attrs, options)) return false;\n      } else if (!this._validate(attrs, options)) {\n        return false;\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      var model = this;\n      var success = options.success;\n      var attributes = this.attributes;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n        if (serverAttrs && !model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\n      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\n      var xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n      var wait = options.wait;\n\n      var destroy = function() {\n        model.stopListening();\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (wait) destroy();\n        if (success) success.call(options.context, model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      var xhr = false;\n      if (this.isNew()) {\n        _.defer(options.success);\n      } else {\n        wrapError(this, options);\n        xhr = this.sync('delete', this, options);\n      }\n      if (!wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base =\n        _.result(this, 'urlRoot') ||\n        _.result(this.collection, 'url') ||\n        urlError();\n      if (this.isNew()) return base;\n      var id = this.get(this.idAttribute);\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return !this.has(this.idAttribute);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.extend({}, options, {validate: true}));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model, mapped to the\n  // number of arguments they take.\n  var modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,\n      omit: 0, chain: 1, isEmpty: 1};\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  addUnderscoreMethods(Model, modelMethods, 'attributes');\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analogous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Splices `insert` into `array` at index `at`.\n  var splice = function(array, insert, at) {\n    at = Math.min(Math.max(at, 0), array.length);\n    var tail = Array(array.length - at);\n    var length = insert.length;\n    var i;\n    for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n  };\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model) { return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set. `models` may be Backbone\n    // Models or raw JavaScript objects to be converted to Models, or any\n    // combination of the two.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      options = _.extend({}, options);\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n      var removed = this._removeModels(models, options);\n      if (!options.silent && removed.length) {\n        options.changes = {added: [], merged: [], removed: removed};\n        this.trigger('update', this, options);\n      }\n      return singular ? removed[0] : removed;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      if (models == null) return;\n\n      options = _.extend({}, setOptions, options);\n      if (options.parse && !this._isModel(models)) {\n        models = this.parse(models, options) || [];\n      }\n\n      var singular = !_.isArray(models);\n      models = singular ? [models] : models.slice();\n\n      var at = options.at;\n      if (at != null) at = +at;\n      if (at > this.length) at = this.length;\n      if (at < 0) at += this.length + 1;\n\n      var set = [];\n      var toAdd = [];\n      var toMerge = [];\n      var toRemove = [];\n      var modelMap = {};\n\n      var add = options.add;\n      var merge = options.merge;\n      var remove = options.remove;\n\n      var sort = false;\n      var sortable = this.comparator && at == null && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      var model, i;\n      for (i = 0; i < models.length; i++) {\n        model = models[i];\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        var existing = this.get(model);\n        if (existing) {\n          if (merge && model !== existing) {\n            var attrs = this._isModel(model) ? model.attributes : model;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            toMerge.push(existing);\n            if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n          }\n          if (!modelMap[existing.cid]) {\n            modelMap[existing.cid] = true;\n            set.push(existing);\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(model, options);\n          if (model) {\n            toAdd.push(model);\n            this._addReference(model, options);\n            modelMap[model.cid] = true;\n            set.push(model);\n          }\n        }\n      }\n\n      // Remove stale models.\n      if (remove) {\n        for (i = 0; i < this.length; i++) {\n          model = this.models[i];\n          if (!modelMap[model.cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this._removeModels(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      var orderChanged = false;\n      var replace = !sortable && add && remove;\n      if (set.length && replace) {\n        orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {\n          return m !== set[index];\n        });\n        this.models.length = 0;\n        splice(this.models, set, 0);\n        this.length = this.models.length;\n      } else if (toAdd.length) {\n        if (sortable) sort = true;\n        splice(this.models, toAdd, at == null ? this.length : at);\n        this.length = this.models.length;\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort/update events.\n      if (!options.silent) {\n        for (i = 0; i < toAdd.length; i++) {\n          if (at != null) options.index = at + i;\n          model = toAdd[i];\n          model.trigger('add', model, this, options);\n        }\n        if (sort || orderChanged) this.trigger('sort', this, options);\n        if (toAdd.length || toRemove.length || toMerge.length) {\n          options.changes = {\n            added: toAdd,\n            removed: toRemove,\n            merged: toMerge\n          };\n          this.trigger('update', this, options);\n        }\n      }\n\n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options = options ? _.clone(options) : {};\n      for (var i = 0; i < this.models.length; i++) {\n        this._removeReference(this.models[i], options);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      return this.remove(model, options);\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      return this.remove(model, options);\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id, cid, model object with id or cid\n    // properties, or an attributes object that is transformed through modelId.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      return this._byId[obj] ||\n        this._byId[this.modelId(obj.attributes || obj)] ||\n        obj.cid && this._byId[obj.cid];\n    },\n\n    // Returns `true` if the model is in the collection.\n    has: function(obj) {\n      return this.get(obj) != null;\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      if (index < 0) index += this.length;\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      return this[first ? 'find' : 'filter'](attrs);\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      var comparator = this.comparator;\n      if (!comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      var length = comparator.length;\n      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);\n\n      // Run sort based on type of `comparator`.\n      if (length === 1 || _.isString(comparator)) {\n        this.models = this.sortBy(comparator);\n      } else {\n        this.models.sort(comparator);\n      }\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return this.map(attr + '');\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success.call(options.context, collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      var wait = options.wait;\n      model = this._prepareModel(model, options);\n      if (!model) return false;\n      if (!wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(m, resp, callbackOpts) {\n        if (wait) collection.add(m, callbackOpts);\n        if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models, {\n        model: this.model,\n        comparator: this.comparator\n      });\n    },\n\n    // Define how to uniquely identify models in the collection.\n    modelId: function(attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (this._isModel(attrs)) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method called by both remove and set.\n    _removeModels: function(models, options) {\n      var removed = [];\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n\n        // Remove references before triggering 'remove' event to prevent an\n        // infinite loop. #3693\n        delete this._byId[model.cid];\n        var id = this.modelId(model.attributes);\n        if (id != null) delete this._byId[id];\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed;\n    },\n\n    // Method for checking whether an object should be considered a model for\n    // the purposes of adding to the collection.\n    _isModel: function(model) {\n      return model instanceof Model;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n      this._byId[model.cid] = model;\n      var id = this.modelId(model.attributes);\n      if (id != null) this._byId[id] = model;\n      model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes);\n      if (id != null) delete this._byId[id];\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if (model) {\n        if ((event === 'add' || event === 'remove') && collection !== this) return;\n        if (event === 'destroy') this.remove(model, options);\n        if (event === 'change') {\n          var prevId = this.modelId(model.previousAttributes());\n          var id = this.modelId(model.attributes);\n          if (prevId !== id) {\n            if (prevId != null) delete this._byId[prevId];\n            if (id != null) this._byId[id] = model;\n          }\n        }\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,\n      foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,\n      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,\n      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\n      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\n      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\n      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,\n      sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  addUnderscoreMethods(Collection, collectionMethods, 'models');\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be set as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this._removeElement();\n      this.stopListening();\n      return this;\n    },\n\n    // Remove this view's element from the document and all event listeners\n    // attached to it. Exposed for subclasses using an alternative DOM\n    // manipulation API.\n    _removeElement: function() {\n      this.$el.remove();\n    },\n\n    // Change the view's element (`this.el` property) and re-delegate the\n    // view's events on the new element.\n    setElement: function(element) {\n      this.undelegateEvents();\n      this._setElement(element);\n      this.delegateEvents();\n      return this;\n    },\n\n    // Creates the `this.el` and `this.$el` references for this view using the\n    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n    // context or an element. Subclasses can override this to utilize an\n    // alternative DOM manipulation API and are only required to set the\n    // `this.el` property.\n    _setElement: function(el) {\n      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n      this.el = this.$el[0];\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    delegateEvents: function(events) {\n      events || (events = _.result(this, 'events'));\n      if (!events) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[method];\n        if (!method) continue;\n        var match = key.match(delegateEventSplitter);\n        this.delegate(match[1], match[2], _.bind(method, this));\n      }\n      return this;\n    },\n\n    // Add a single event listener to the view's element (or a child element\n    // using `selector`). This only works for delegate-able events: not `focus`,\n    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n    delegate: function(eventName, selector, listener) {\n      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view by `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // A finer-grained `undelegateEvents` for removing a single delegated event.\n    // `selector` and `listener` are both optional.\n    undelegate: function(eventName, selector, listener) {\n      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Produces a DOM element to be assigned to your view. Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _createElement: function(tagName) {\n      return document.createElement(tagName);\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        this.setElement(this._createElement(_.result(this, 'tagName')));\n        this._setAttributes(attrs);\n      } else {\n        this.setElement(_.result(this, 'el'));\n      }\n    },\n\n    // Set attributes from a hash on this view's element.  Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _setAttributes: function(attributes) {\n      this.$el.attr(attributes);\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // Pass along `textStatus` and `errorThrown` from jQuery.\n    var error = options.error;\n    options.error = function(xhr, textStatus, errorThrown) {\n      options.textStatus = textStatus;\n      options.errorThrown = errorThrown;\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\n    };\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch': 'PATCH',\n    'delete': 'DELETE',\n    'read': 'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        if (router.execute(callback, args, name) !== false) {\n          router.trigger.apply(router, ['route:' + name].concat(args));\n          router.trigger('route', name, args);\n          Backbone.history.trigger('route', router, name, args);\n        }\n      });\n      return this;\n    },\n\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function(callback, args, name) {\n      if (callback) callback.apply(this, args);\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^/?]+)';\n                   })\n                   .replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    this.checkUrl = _.bind(this.checkUrl, this);\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for stripping urls of hash.\n  var pathStripper = /#.*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Are we at the app root?\n    atRoot: function() {\n      var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\n      return path === this.root && !this.getSearch();\n    },\n\n    // Does the pathname match the root?\n    matchRoot: function() {\n      var path = this.decodeFragment(this.location.pathname);\n      var rootPath = path.slice(0, this.root.length - 1) + '/';\n      return rootPath === this.root;\n    },\n\n    // Unicode characters in `location.pathname` are percent encoded so they're\n    // decoded for comparison. `%25` should not be decoded since it may be part\n    // of an encoded parameter.\n    decodeFragment: function(fragment) {\n      return decodeURI(fragment.replace(/%25/g, '%2525'));\n    },\n\n    // In IE6, the hash fragment and search params are incorrect if the\n    // fragment contains `?`.\n    getSearch: function() {\n      var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\n      return match ? match[0] : '';\n    },\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the pathname and search params, without the root.\n    getPath: function() {\n      var path = this.decodeFragment(\n        this.location.pathname + this.getSearch()\n      ).slice(this.root.length - 1);\n      return path.charAt(0) === '/' ? path.slice(1) : path;\n    },\n\n    // Get the cross-browser normalized URL fragment from the path or hash.\n    getFragment: function(fragment) {\n      if (fragment == null) {\n        if (this._usePushState || !this._wantsHashChange) {\n          fragment = this.getPath();\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error('Backbone.history has already been started');\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);\n      this._useHashChange   = this._wantsHashChange && this._hasHashChange;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.history && this.history.pushState);\n      this._usePushState    = this._wantsPushState && this._hasPushState;\n      this.fragment         = this.getFragment();\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          var rootPath = this.root.slice(0, -1) || '/';\n          this.location.replace(rootPath + '#' + this.getPath());\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot()) {\n          this.navigate(this.getHash(), {replace: true});\n        }\n\n      }\n\n      // Proxy an iframe to handle location events if the browser doesn't\n      // support the `hashchange` event, HTML5 history, or the user wants\n      // `hashChange` but not `pushState`.\n      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n        this.iframe = document.createElement('iframe');\n        this.iframe.src = 'javascript:0';\n        this.iframe.style.display = 'none';\n        this.iframe.tabIndex = -1;\n        var body = document.body;\n        // Using `appendChild` will throw on IE < 9 if the document is not ready.\n        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n        iWindow.document.open();\n        iWindow.document.close();\n        iWindow.location.hash = '#' + this.fragment;\n      }\n\n      // Add a cross-platform `addEventListener` shim for older browsers.\n      var addEventListener = window.addEventListener || function(eventName, listener) {\n        return attachEvent('on' + eventName, listener);\n      };\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._usePushState) {\n        addEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        addEventListener('hashchange', this.checkUrl, false);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      // Add a cross-platform `removeEventListener` shim for older browsers.\n      var removeEventListener = window.removeEventListener || function(eventName, listener) {\n        return detachEvent('on' + eventName, listener);\n      };\n\n      // Remove window listeners.\n      if (this._usePushState) {\n        removeEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        removeEventListener('hashchange', this.checkUrl, false);\n      }\n\n      // Clean up the iframe if necessary.\n      if (this.iframe) {\n        document.body.removeChild(this.iframe);\n        this.iframe = null;\n      }\n\n      // Some environments will throw when clearing an undefined interval.\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n\n      // If the user pressed the back button, the iframe's hash will have\n      // changed and we should use that for comparison.\n      if (current === this.fragment && this.iframe) {\n        current = this.getHash(this.iframe.contentWindow);\n      }\n\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      // If the root doesn't match, no routes can match either.\n      if (!this.matchRoot()) return false;\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.some(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      // Normalize the fragment.\n      fragment = this.getFragment(fragment || '');\n\n      // Don't include a trailing slash on the root.\n      var rootPath = this.root;\n      if (fragment === '' || fragment.charAt(0) === '?') {\n        rootPath = rootPath.slice(0, -1) || '/';\n      }\n      var url = rootPath + fragment;\n\n      // Strip the hash and decode for matching.\n      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._usePushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {\n          var iWindow = this.iframe.contentWindow;\n\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if (!options.replace) {\n            iWindow.document.open();\n            iWindow.document.close();\n          }\n\n          this._updateHash(iWindow.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function and add the prototype properties.\n    child.prototype = _.create(parent.prototype, protoProps);\n    child.prototype.constructor = child;\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error.call(options.context, model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/backbone/backbone.js\n// module id = 138\n// module chunks = 0 1 2","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 143\n// module chunks = 0 1 2","module.exports = \"<div class=\\\"form-inline\\\">\\n    <input placeholder=\\\"Enter group title...\\\" type=\\\"text\\\" class=\\\"form-control\\\" />\\n    <button class=\\\"btn btn-success btn-add-group\\\"><span class=\\\"glyphicon glyphicon-ok\\\"></span></button>\\n</div>\\n\"\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/sort-fields/add-group-popover-template.html","module.exports = \"<li data-field-id=\\\"<%- id %>\\\" class=\\\"list-group-item\\\">\\n    <span class=\\\"field-label\\\"><%- label %></span>\\n    <span class=\\\"text-muted glyphicon glyphicon-align-justify pull-right\\\"></span>\\n</li>\\n\"\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/sort-fields/list-field-template.html","module.exports = \"<li class=\\\"list-group-item list-group-item-title\\\">\\n    <span class=\\\"badge\\\">\\n        <%- fields.length %>\\n        <%- (1 === fields.length ? 'Field' : 'Fields') %>\\n    </span>\\n    <h4>\\n        <%- title %>\\n    </h4>\\n    <% if (caption) { %>\\n    <div class=\\\"help-block\\\"><%- caption %></div>\\n    <% } %>\\n    <% if (allowEditing) { %>\\n    <div class=\\\"title-input form-inline\\\">\\n        <input type=\\\"text\\\" class=\\\"title-input form-control\\\" value=\\\"<%- title %>\\\" />\\n        <button type=\\\"button\\\" class=\\\"btn btn-save-title btn-success btn-sm\\\"><span class=\\\"glyphicon glyphicon-ok\\\"></span></button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-cancel btn-link btn-sm\\\">Cancel</button>\\n    </div>\\n    <div class=\\\"title-buttons\\\">\\n        <a href=\\\"#\\\" class=\\\"btn-remove pull-right btn btn-sm btn-default\\\">\\n            <span class=\\\"glyphicon glyphicon-remove\\\"></span>\\n            Delete Group\\n        </a>\\n        <a href=\\\"#\\\" class=\\\"btn-edit pull-right btn btn-sm btn-success\\\">\\n            <span class=\\\"glyphicon glyphicon-pencil\\\"></span>\\n            Edit Title\\n        </a>\\n    </div>\\n    <% } %>\\n</li>\\n\"\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/sort-fields/list-template.html","import popoverHtml from './add-group-popover-template.html';\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\nvar AddGroupPopoverView = Backbone.View.extend({\n    el: '#add-group-wrapper',\n\n    events: {\n        'click #add-group':                     'preventSubmission',\n        'show.bs.popover #add-group':           'focusInput',\n        'keydown .popover-content input:first': 'addGroupOnEnter',\n        'click .popover-content .btn':          'addGroup',\n    },\n\n    groups: null,\n\n    initialize: function (attributes, options) {\n        this.$el.find('#add-group').popover(\n            {\n                html:      true,\n                placement: 'top',\n                content:   popoverHtml\n            }\n        );\n    },\n\n    setGroups: function (groups) {\n        this.groups = groups;\n\n        return this;\n    },\n\n    preventSubmission: function (e) {\n        e.preventDefault();\n    },\n\n    focusInput: function (e) {\n        setTimeout(\n            _.bind(\n                function () {\n                    this.$el.find('.popover-content input').focus();\n                },\n                this\n            ),\n            1\n        );\n    },\n\n    addGroupOnEnter: function (e) {\n        if (13 === e.keyCode) {\n            return this.addGroup(e);\n        }\n    },\n\n    addGroup: function (e) {\n        e.preventDefault();\n\n        $('#add-group').popover('hide');\n\n        this.collection.add({\n            title: this.$el.find('.popover-content input').val()\n        });\n    }\n});\n\nexport default AddGroupPopoverView;\n\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/sort-fields/add-group-popover-view.js","import _ from 'underscore';\nimport Backbone from 'backbone';\n\nvar Model = Backbone.Model.extend({\n    defaults: {\n        allowEditing: true,\n        animate:      true,\n        title:        '',\n        caption:      '',\n        sortIndex:    null,\n        fields:       []\n    }\n});\n\nvar GroupsCollection = Backbone.Collection.extend({\n    model: Model,\n\n    comparator: 'sortIndex',\n\n    toJSON: function () {\n        return this.map(\n            function (model) {\n                return _.pick(model.toJSON(this), ['title', 'fields'])\n            }\n        );\n    },\n\n    initializeWithGlobalVariable: function () {\n        if ('undefined' === typeof window.initialFieldGroupsConfig) {\n            throw 'Could not find initialFieldGroupsConfig variable in global scope';\n        }\n\n        _.each(\n            window.initialFieldGroupsConfig,\n            function (group, index) {\n                group.allowEditing = true;\n                group.animate      = false;\n                group.sortIndex    = index;\n\n                if (0 === index) {\n                    group.allowEditing = false;\n                }\n\n                this.add(group);\n            },\n            this\n        );\n    }\n});\n\nexport default GroupsCollection;\n\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/sort-fields/groups-collection.js","import List from './list-view';\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\nvar GroupsView = Backbone.View.extend({\n    el: '#groups-wrapper',\n\n    events: {\n        'sortstop': 'updateSortIndexes'\n    },\n\n    initialize: function () {\n        this.collection.on('add remove', this.render, this);\n    },\n\n    render: function () {\n        var hideTitle = (1 === this.collection.length);\n\n        this.$el.empty();\n\n        this.collection.each(\n            function (group, index) {\n                var view = new List({\n                    model:          group,\n                    hideTitle:      hideTitle,\n                    ungroupedModel: this.collection.first()\n                });\n\n                this.$el.append(view.render().el);\n            },\n            this\n        );\n\n        this.$el.sortable({\n            items: 'ul:not(.list-group:first)',\n        }).disableSelection();\n\n        return this;\n    },\n\n    updateSortIndexes: function () {\n        this.$el.find('.list-group').each(\n            _.bind(\n                function (index, list) {\n                    this.collection.get($(list).data('model-id')).set('sortIndex', index);\n                    this.collection.sort();\n                },\n                this\n            )\n        );\n    }\n});\n\nexport default GroupsView;\n\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/sort-fields/groups-view.js","import listHtml from './list-template.html';\nimport fieldHtml from './list-field-template.html';\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\nvar listTemplate  = _.template(listHtml),\n    fieldTemplate = _.template(fieldHtml);\n\nvar ListView = Backbone.View.extend({\n    template: listTemplate,\n\n    tagName: 'ul',\n\n    className: 'list-group',\n\n    hideTitle: false,\n\n    events: {\n        'sortstop':              'updateModelFields',\n        'sortremove':            'updateModelFields',\n        'sortreceive':           'updateModelFields',\n        'click .btn-remove':     'delete',\n        'click .btn-edit':       'showTitleInput',\n        'click .btn-save-title': 'saveTitle',\n        'click .btn-cancel':     'cancelTitleInput',\n        'keydown .title-input':  'saveTitleOnEnter'\n    },\n\n    initialize: function (attributes, options) {\n        this.model.on('change:title', this.render, this);\n        this.model.on('change:fields', this.updateBadge, this);\n\n        this.hideTitle      = attributes.hideTitle;\n        this.ungroupedModel = attributes.ungroupedModel;\n    },\n\n    render: function () {\n        var list;\n\n        this.$el.html(this.template(this.model.toJSON()));\n        this.$el.find('.title-input').hide();\n\n        if (this.model.get('animate') && !this.model.get('fields').length) {\n            this.$el.velocity('transition.flipYIn');\n        }\n\n        // We don't want to show the title at all when there is only 1 group\n        if (this.hideTitle) {\n            this.$el.find('.list-group-item-title').remove();\n        }\n\n        this.$el.data('model-id', this.model.cid);\n\n        this.$el.sortable({\n            items:       'li:not(.list-group-item-title)',\n            connectWith: '.list-group'\n        }).disableSelection();\n\n        _.each(\n            this.model.get('fields'),\n            function (field, index) {\n                this.$el.append(fieldTemplate(field));\n            },\n            this\n        );\n\n        return this;\n    },\n\n    delete: function (e) {\n        e.preventDefault();\n\n        // Pass remaining fields over to the \"ungrouped\" set\n        this.ungroupedModel.set(\n            'fields',\n            this.ungroupedModel.get('fields').concat(this.model.get('fields'))\n        );\n\n        this.model.destroy();\n    },\n\n    showTitleInput: function (e) {\n        e.preventDefault();\n\n        this.$el.find('h4').hide();\n        this.$el.find('.title-input').show();\n        this.$el.find('.title-input').focus();\n    },\n\n    saveTitleOnEnter: function (e) {\n        if (13 === e.keyCode) {\n            this.saveTitle(e);\n        }\n    },\n\n    saveTitle: function (e) {\n        e.preventDefault();\n\n        this.model.set('title', this.$el.find('.title-input input').val());\n\n        this.cancelTitleInput(e);\n    },\n\n    cancelTitleInput: function (e) {\n        e.preventDefault();\n\n        this.$el.find('.title-input').hide();\n        this.$el.find('h4').show();\n    },\n\n    updateBadge: function () {\n        var count  = this.model.get('fields').length,\n            suffix = (1 === count ? '' : 's');\n\n        this.$el.find('.badge').text(count + ' Field' + suffix);\n    },\n\n    updateModelFields: function (e, ui) {\n        var fields = [];\n\n        this.$el.find('li:not(.list-group-item-title)').each(\n            function (index, element) {\n                fields.push({\n                    id:        $(element).data('field-id'),\n                    label:     $(element).find('.field-label').text()\n                });\n            }\n        );\n\n        this.model.set('fields', fields);\n    }\n});\n\nexport default ListView;\n\n\n\n// WEBPACK FOOTER //\n// ./www/src/js/sort-fields/list-view.js"],"sourceRoot":""}